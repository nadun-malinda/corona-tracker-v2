{"version":3,"sources":["components/Charts/WorldChart/WorldChart.module.scss","components/Board/WorldBoard/CountryList/CountryList.module.scss","components/Map/Controls/Controls.module.scss","components/Board/WorldBoard/WorldBoard.module.scss","components/CountrySearch/CountrySearch.module.scss","components/Map/Map.module.scss","utils/utils.ts","consts.ts","store/covid-slice.ts","store/country-slice.ts","store/map-slice.ts","store/board-slice.ts","store/index.ts","store/hooks.ts","components/Map/Controls/Controls.tsx","components/Map/layers/CountryLayerHook.tsx","components/Map/layers/BorderLayerHook.tsx","components/Map/Map.tsx","components/Charts/WorldChart/WorldChart.tsx","components/Board/WorldBoard/CountryList/CountryList.tsx","components/Board/WorldBoard/WorldBoard.tsx","components/Board/CountryBoard/GeneralSkeleton/GeneralSkeleton.tsx","components/Board/CountryBoard/CovidListSkeleton/CovidListSkeleton.tsx","components/Board/CountryBoard/CountryBoard.tsx","components/Board/Board.tsx","utils/deBounce.ts","components/CountrySearch/CountrySearch.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Board/CountryBoard/CountryBoard.module.scss","components/Board/Board.module.scss"],"names":["module","exports","boundaryBoxData","bbDataFile","boundaryGeoJsonData","countryGeoJsonFile","getFitBounds","alpha2Code","viewState","bounds","bb","getBoundsByAlpha2","WebMercatorViewport","fitBounds","padding","window","innerWidth","width","height","longitude","latitude","zoom","covidSlice","createSlice","name","initialState","country","flag","cca2","cca3","population","latest","timeline","loading","reducers","setCovidCountry","state","action","payload","setLoading","type","fetchCountryCovid","dispatch","getState","a","axios","get","process","response","data","code","latest_data","countries","filter","c","console","log","countrySlice","feature","setCountries","setCountryFeature","actions","mapStyle","bearing","pitch","maxZoom","minZoom","transitionDuration","mapWidth","mapSlice","setMapStyle","setViewState","setMapWidth","fitToBounds","map","batch","features","find","fe","properties","ISO2","getFeatureByAplha2","boardSlice","board","open","setBoard","setOpen","store","configureStore","reducer","covid","middleware","getDefaultMiddleware","serializableCheck","useAppSelector","useSelector","useAppDispatch","useDispatch","Controls","className","classes","PlusSquareOutlined","Icon","onClick","MinusSquareOutlined","useCountryLayer","useState","countryLayer","setCountryLayer","useEffect","lr","GeoJsonLayer","id","stroked","filled","pickable","autoHighlight","highlightColor","getFillColor","getLineColor","d","lineWidthMinPixels","info","object","useBorderLayer","borderLayer","setBorderLayer","boundaryData","countriesGeoJson","initialBorderFetaure","geometry","Map","layerData","borderLayerData","setBorderLayerData","onViewStateChangeHandler","useCallback","transitionInterpolator","FlyToInterpolator","views","MapView","x","controller","onViewStateChange","getCursor","interactiveState","isHovering","isDragging","layers","mapboxApiAccessToken","Option","Select","defaultTimelineType","initialChartData","y","chartDataReducer","key","reverse","WorldChart","isDataReady","setIsDataReady","crossshairValues","setCrossshairValues","setTimeline","alteredTimeline","setAlteredTimeline","timelineType","setTimelineType","useReducer","chartData","dispatchChartData","then","res","catch","err","date","Date","month","toLocaleString","day","year","month_year","grouped","d3Array","timelineCategory","forEach","val","push","style","marginBottom","textAlign","onChange","value","defaultValue","Button","maxWidth","active","animation","xType","margin","left","onMouseLeave","strokeOpacity","opacity","stroke","strokeStyle","onNearestX","curve","strokeWidth","fill","values","Crosshair","Item","CalendarOutlined","Calendar","MedicineBoxOutlined","Cases","FrownOutlined","Deaths","SmileOutlined","Recovered","d3Format","tickSizeInner","tickSizeOuter","tickFormat","split","CountryList","countriesResponse","_dispatch","_useSttae","covidResponse","countryFlags","countryCovid","cc","cf","confirmed","sort","b","direction","List","ListItem","onClickHandler","Name","Flag","Stats","title","deaths","WorldPanel","Chart","GeneralSkeleton","shape","size","rowGap","CovidListSkeleton","lineHeight","Input","verticalAlign","CountryBoard","Back","ArrowLeftOutlined","marginRight","General","CountryName","Covid","Confirmed","Critical","critical","recovered","Board","SlideRight","SlideLeft","Toggler","toggleBoard","IconWrap","LeftOutlined","RightOutlined","Hide","WorldBoard","useDebounce","delay","debouncedvalue","setDebouncedValue","handler","setTimeout","clearTimeout","CountrySearch","text","setText","options","setOptions","debounceSearchText","common","clearIcon","Search","onSelect","_","option","onSearch","placeholder","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0721a382.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Crosshair\":\"WorldChart_Crosshair__3eEK-\",\"Item\":\"WorldChart_Item__j0UGC\",\"Calendar\":\"WorldChart_Calendar__3hsC0\",\"Cases\":\"WorldChart_Cases__1gyFR\",\"Deaths\":\"WorldChart_Deaths__1Q1SE\",\"Recovered\":\"WorldChart_Recovered__3s6lG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"CountryList_List__25G8c\",\"ListItem\":\"CountryList_ListItem__2ZVnX\",\"Stats\":\"CountryList_Stats__3-WxK\",\"Flag\":\"CountryList_Flag__329Is\",\"Name\":\"CountryList_Name__3mFui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__1lagr\",\"Icon\":\"Controls_Icon__2Ucoj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"WorldBoard_List__1-ORZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountrySearch\":\"CountrySearch_CountrySearch__1JgHu\",\"Search\":\"CountrySearch_Search__2mMYU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view-map\":\"Map_view-map__2Vah8\"};","import { WebMercatorViewport } from '@deck.gl/core'\nimport {\n    ViewState,\n    BoundaryBoxData,\n    FeatureCollection,\n    Feature\n} from '../interfaces'\nimport { MOBILE_MAX_WIDTH } from '../consts'\nimport bbDataFile from '../data/boundary-boxes.json'\nimport countryGeoJsonFile from '../data/countries-geojson.json'\n\nconst boundaryBoxData = bbDataFile as BoundaryBoxData\nconst boundaryGeoJsonData = countryGeoJsonFile as FeatureCollection\n\nexport const getFeatureByAplha2 = (\n    alpha2Code: string | number\n): Feature | [] => {\n    const feature = boundaryGeoJsonData.features.find(\n        (fe) => fe.properties.ISO2 === alpha2Code\n    )\n\n    return feature ? feature : []\n}\n\nexport const getBoundsByAlpha2 = (alpha2Code: string | number) => {\n    const bb = boundaryBoxData[alpha2Code]?.[1]\n        ? boundaryBoxData[alpha2Code][1]\n        : [null, [null, null, null, null]]\n    return [\n        [bb[0], bb[1]],\n        [bb[2], bb[3]]\n    ]\n}\n\nexport const getFitBounds = (alpha2Code: string, viewState: ViewState) => {\n    const bounds = getBoundsByAlpha2(alpha2Code)\n    if (bounds[0][0] === null) return false\n    const vp = new WebMercatorViewport({ ...viewState }) as unknown as ViewState\n    const { width, height, longitude, latitude, zoom } = vp.fitBounds(bounds, {\n        padding: window.innerWidth > MOBILE_MAX_WIDTH ? 60 : 0\n    })\n\n    return { width, height, longitude, latitude, zoom }\n}\n","export const BOARD_WIDTH = 375\nexport const MOBILE_MAX_WIDTH = 500\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport axios from 'axios'\nimport {\n    TimelineData,\n    Country,\n    CovidCountriesResponseData\n} from '../interfaces'\n\ninterface fetchTimelineResponse {\n    data: {\n        data: TimelineData[]\n    }\n}\n\ninterface CovidCountryResponse {\n    data: {\n        data: CovidCountriesResponseData\n    }\n}\n\ninterface CovidCountriesResponse {\n    data: {\n        data: CovidCountriesResponseData[]\n    }\n}\n\ninterface CovidState {\n    country: Country\n    loading: boolean\n}\n\nconst initialState: CovidState = {\n    country: {\n        name: '',\n        flag: '',\n        cca2: '',\n        cca3: '',\n        population: 0,\n        latest: null,\n        timeline: null\n    },\n    loading: false\n}\n\nconst covidSlice = createSlice({\n    name: 'covid',\n    initialState,\n    reducers: {\n        setCovidCountry(state, action: PayloadAction<Country>) {\n            state.country = action.payload\n        },\n        setLoading(state, action: PayloadAction<boolean>) {\n            state.loading = action.payload\n        }\n    }\n})\n\n// action creators\nexport const setCovidCountry = (covidCountry: Country) => ({\n    type: 'covid/setCovidCountry',\n    payload: covidCountry\n})\nexport const setLoading = (loading: boolean) => ({\n    type: 'covid/setLoading',\n    payload: loading\n})\n\n// thunks\nexport const fetchGlobalTimeline = (): AppThunk<\n    Promise<fetchTimelineResponse>\n> => {\n    return async () => {\n        return await axios.get(`${process.env.REACT_APP_CORONA_API}/timeline`)\n    }\n}\n\nexport const fetchCovidCountries = (): AppThunk<\n    Promise<CovidCountriesResponse>\n> => {\n    return async (_dispatch, _useSttae) => {\n        return await axios.get(`${process.env.REACT_APP_CORONA_API}/countries`)\n    }\n}\n\nexport const fetchCountryCovid = (cca2: string): AppThunk => {\n    return async (dispatch, getState) => {\n        try {\n            dispatch(setLoading(true))\n\n            const response: CovidCountryResponse = await axios.get(\n                `${process.env.REACT_APP_CORONA_API}/countries/${cca2}`\n            )\n\n            const { name, code, population, latest_data, timeline } =\n                response.data.data\n            const { countries } = getState().country\n            const [country] = countries.filter((c) => c.cca2 === cca2)\n            dispatch(\n                setCovidCountry({\n                    name,\n                    cca2: code,\n                    population,\n                    latest: latest_data,\n                    timeline,\n                    flag: country.flag\n                })\n            )\n\n            dispatch(setLoading(false))\n        } catch (error) {\n            console.log('Error while loading country covid data: ', error)\n            dispatch(setLoading(false))\n        }\n    }\n}\n\nexport default covidSlice\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport axios from 'axios'\nimport { fetchCovidCountries } from './covid-slice'\nimport { Country, Feature } from '../interfaces'\n\ninterface CountryName {\n    common: string\n    nativeName: any\n    official: string\n}\n\nexport interface CountryData {\n    name: CountryName\n    cca2: string\n    cca3: string\n    flag: string\n    population: number\n}\n\ninterface CountrySearchResponse {\n    data: CountryData[]\n}\n\ninterface CountryState {\n    countries: Country[]\n    country: Country\n    loading: boolean\n}\n\nconst initialState: CountryState = {\n    countries: [],\n    country: {\n        name: '',\n        flag: '',\n        latest: null,\n        cca2: '',\n        cca3: '',\n        population: 0,\n        feature: []\n    },\n    loading: false\n}\n\nconst countrySlice = createSlice({\n    name: 'country',\n    initialState,\n    reducers: {\n        setCountries(state, action: PayloadAction<Country[]>) {\n            state.countries = action.payload\n        },\n        setCountryFeature(state, action: PayloadAction<Feature>) {\n            state.country = { ...state.country, feature: action.payload }\n        },\n        setLoading(state, action: PayloadAction<boolean>) {\n            state.loading = action.payload\n        }\n    }\n})\n\n// action creators\nexport const setCountries = (countries: Country[]) => ({\n    type: 'country/setCountries',\n    payload: countries\n})\n\nexport const setCountryFeature = (feature: Feature | []) => ({\n    type: 'country/setCountryFeature',\n    payload: feature\n})\n\nexport const setLoading = (loading: boolean) => ({\n    type: 'country/setLoading',\n    payload: loading\n})\n\nexport const fetchCountryByName = (\n    name: string\n): AppThunk<Promise<CountrySearchResponse>> => {\n    return async () => {\n        return await axios.get(\n            `${process.env.REACT_APP_RESTCOUNTRIES_API}/name/${name}`\n        )\n    }\n}\n\nexport const fetchAllCountries = (): AppThunk<\n    Promise<CountrySearchResponse>\n> => {\n    return async () => {\n        return await axios.get(\n            `${process.env.REACT_APP_RESTCOUNTRIES_API}/all?fields=flag,cca2`\n        )\n    }\n}\n\nexport const fetchAllCountriesAndCovidData = (): AppThunk => {\n    return async (dispatch) => {\n        try {\n            dispatch(setLoading(true))\n            const countriesResponse = await dispatch(fetchAllCountries())\n            const covidResponse = await dispatch(fetchCovidCountries())\n            const countryFlags = countriesResponse.data\n            const countryCovid = covidResponse.data.data\n\n            const countries = countryCovid\n                .map((cc) => {\n                    const flag = countryFlags.find((cf) => cf.cca2 === cc.code)\n                    return {\n                        name: cc.name,\n                        cca2: cc.code,\n                        latest: cc.latest_data,\n                        flag: flag ? flag.flag : ''\n                    }\n                })\n                .filter((c) => c.latest.confirmed > 100000)\n                .sort((a, b) => b.latest.confirmed - a.latest.confirmed)\n\n            dispatch(setCountries(countries))\n            dispatch(setLoading(false))\n        } catch (error) {\n            console.log('Error while loading country and covid data: ', error)\n            dispatch(setLoading(false))\n        }\n    }\n}\n\nexport const countryActions = countrySlice.actions\nexport default countrySlice\n","import { batch } from 'react-redux'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport { MapboxStyle, ViewState } from '../interfaces'\nimport { getFitBounds, getFeatureByAplha2 } from '../utils/utils'\nimport { setCountryFeature } from './country-slice'\nimport { BOARD_WIDTH } from '../consts'\n\ninterface MapState {\n    mapStyle: MapboxStyle\n    viewState: ViewState\n    mapWidth: number\n}\n\nconst initialState: MapState = {\n    mapStyle: 'dark-v10',\n    viewState: {\n        bearing: 0,\n        height: 0,\n        latitude: 43.047295,\n        longitude: 11.753803,\n        pitch: 0,\n        width: 0,\n        zoom: 1.5,\n        maxZoom: 10,\n        minZoom: 1.5,\n        transitionDuration: 'auto'\n    },\n    mapWidth: window.innerWidth - BOARD_WIDTH\n}\n\nconst mapSlice = createSlice({\n    name: 'map',\n    initialState,\n    reducers: {\n        setMapStyle(state, action: PayloadAction<MapboxStyle>) {\n            state.mapStyle = action.payload\n        },\n        setViewState(state, action: PayloadAction<ViewState>) {\n            state.viewState = { ...state.viewState, ...action.payload }\n        },\n        setMapWidth(state, action: PayloadAction<number>) {\n            state.mapWidth = action.payload\n        }\n    }\n})\n\nexport const setMapStyle = (mapStyle: MapboxStyle) => ({\n    type: 'map/setMapStyle',\n    payload: mapStyle\n})\nexport const setViewState = (viewState: ViewState) => ({\n    type: 'map/setViewState',\n    payload: viewState\n})\nexport const setMapWidth = (width: number) => ({\n    type: 'map/setMapWidth',\n    payload: width\n})\n\nexport const fitToBounds = (alpha2Code: string): AppThunk => {\n    return (dispatch, getState) => {\n        const { viewState } = getState().map\n        const bounds = getFitBounds(alpha2Code, viewState)\n\n        if (bounds) {\n            const { longitude, latitude, zoom } = bounds\n            batch(() => {\n                dispatch(setCountryFeature(getFeatureByAplha2(alpha2Code)))\n                dispatch(setViewState({ latitude, longitude, zoom }))\n            })\n        }\n    }\n}\n\nexport const mapActions = mapSlice.actions\nexport default mapSlice\n","import { batch } from 'react-redux'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport { Board } from '../interfaces'\nimport { setMapWidth } from './map-slice'\nimport { BOARD_WIDTH } from '../consts'\n\ninterface BoardState {\n    board: Board\n    open: boolean\n}\n\nconst initialState: BoardState = {\n    board: 'world',\n    open: true\n}\n\nconst boardSlice = createSlice({\n    name: 'board',\n    initialState,\n    reducers: {\n        setBoard(state, action: PayloadAction<Board>) {\n            state.board = action.payload\n        },\n        setOpen(state, action: PayloadAction<boolean>) {\n            state.open = action.payload\n        }\n    }\n})\n\nexport const setBoard = (board: Board) => ({\n    type: 'board/setBoard',\n    payload: board\n})\nexport const setOpen = (open: boolean) => ({\n    type: 'board/setOpen',\n    payload: open\n})\n\nexport const toggleBoard = (open: boolean): AppThunk => {\n    return (dispatch, getState) => {\n        batch(() => {\n            dispatch(setOpen(open))\n            dispatch(\n                setMapWidth(\n                    open ? window.innerWidth - BOARD_WIDTH : window.innerWidth\n                )\n            )\n        })\n    }\n}\n\nexport const boardActions = boardSlice.actions\nexport default boardSlice\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport mapSlice from './map-slice'\nimport boardSlice from './board-slice'\nimport countrySlice from './country-slice'\nimport covidSlice from './covid-slice'\n\nconst store = configureStore({\n    reducer: {\n        map: mapSlice.reducer,\n        board: boardSlice.reducer,\n        country: countrySlice.reducer,\n        covid: covidSlice.reducer\n    },\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware({\n            serializableCheck: false\n        })\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>\nexport default store\n","import { TypedUseSelectorHook, useSelector, useDispatch } from 'react-redux'\nimport { RootState, AppDispatch } from './index'\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n","import { PlusSquareOutlined, MinusSquareOutlined } from '@ant-design/icons'\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks'\nimport { setViewState } from '../../../store/map-slice'\nimport classes from './Controls.module.scss'\n\nconst Controls = () => {\n    const { viewState } = useAppSelector((state) => state.map)\n    const dispatch = useAppDispatch()\n\n    const zoomInHandler = () => {\n        dispatch(setViewState({ zoom: viewState.zoom + 1 }))\n    }\n\n    const zoomOutHandler = () => {\n        dispatch(setViewState({ zoom: viewState.zoom - 1 }))\n    }\n\n    return (\n        <div className={classes.Controls}>\n            <PlusSquareOutlined\n                className={classes.Icon}\n                onClick={zoomInHandler}\n            />\n            <MinusSquareOutlined\n                className={classes.Icon}\n                onClick={zoomOutHandler}\n            />\n        </div>\n    )\n}\n\nexport default Controls\n","import { useState, useEffect } from 'react'\nimport { batch } from 'react-redux'\nimport { GeoJsonLayer } from '@deck.gl/layers'\nimport { useAppDispatch } from '../../../store/hooks'\nimport { Feature, FeatureCollection } from '../../../interfaces'\nimport { fitToBounds } from '../../../store/map-slice'\nimport { fetchCountryCovid } from '../../../store/covid-slice'\nimport { setBoard } from '../../../store/board-slice'\n\nconst useCountryLayer = (data: FeatureCollection): any => {\n    const [countryLayer, setCountryLayer] = useState({})\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        const lr = new GeoJsonLayer({\n            id: 'countries',\n            data,\n            stroked: true,\n            filled: true,\n            pickable: true,\n            autoHighlight: true,\n            highlightColor: [245, 198, 0, 10],\n            getFillColor: [0, 0, 0, 0],\n            getLineColor: (d) => [0, 0, 0, 0],\n            lineWidthMinPixels: 1,\n            onClick: (info: any | { object: Feature }) => {\n                batch(() => {\n                    dispatch(fetchCountryCovid(info.object.properties.ISO2))\n                    dispatch(fitToBounds(info.object.properties.ISO2))\n                    dispatch(setBoard('country'))\n                })\n            }\n        })\n\n        setCountryLayer(lr)\n    }, [data, dispatch])\n\n    return { countryLayer }\n}\n\nexport default useCountryLayer\n","import { useState, useEffect } from 'react'\nimport { GeoJsonLayer } from '@deck.gl/layers'\nimport { Feature } from '../../../interfaces'\n\nconst useBorderLayer = (data: Feature | []) => {\n    const [borderLayer, setBorderLayer] = useState({})\n\n    useEffect(() => {\n        const lr = new GeoJsonLayer({\n            id: 'border-layer',\n            data,\n            stroked: true,\n            getFillColor: [0, 0, 0, 0],\n            getLineColor: (d) => [245, 198, 0, 200],\n            lineWidthMinPixels: 2\n        })\n\n        setBorderLayer(lr)\n    }, [data])\n\n    return { borderLayer }\n}\n\nexport default useBorderLayer\n","import { useState, useCallback, useEffect } from 'react'\nimport { useAppSelector, useAppDispatch } from '../../store/hooks'\nimport { setViewState } from '../../store/map-slice'\nimport DeckGL from '@deck.gl/react'\nimport { FlyToInterpolator, MapView } from '@deck.gl/core'\nimport { StaticMap } from 'react-map-gl'\nimport Controls from './Controls/Controls'\nimport useCountryLayer from './layers/CountryLayerHook'\nimport useBorderLayer from './layers/BorderLayerHook'\nimport { ViewState, FeatureCollection, Feature } from '../../interfaces'\nimport { BOARD_WIDTH } from '../../consts'\nimport countriesGeoJson from '../../data/countries-geojson.json'\nimport classes from './Map.module.scss'\n\nconst boundaryData = countriesGeoJson as FeatureCollection\nconst initialBorderFetaure: Feature = {\n    type: 'Feature',\n    properties: {},\n    geometry: {}\n}\n\nconst Map = () => {\n    const [layerData] = useState<FeatureCollection>(boundaryData)\n    const [borderLayerData, setBorderLayerData] = useState<Feature | []>(\n        initialBorderFetaure\n    )\n    const { viewState, mapWidth } = useAppSelector((state) => state.map)\n    const { country } = useAppSelector((state) => state.country)\n    const { open } = useAppSelector((state) => state.board)\n    const { countryLayer } = useCountryLayer(layerData)\n    const { borderLayer } = useBorderLayer(borderLayerData)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        country.feature && setBorderLayerData(country.feature)\n    }, [country])\n\n    const onViewStateChangeHandler = useCallback(\n        ({ viewState }: { viewState: ViewState }) => {\n            const { bearing, width, height, latitude, longitude, pitch, zoom } =\n                viewState\n            dispatch(\n                setViewState({\n                    bearing,\n                    width,\n                    height,\n                    latitude,\n                    longitude,\n                    pitch,\n                    zoom\n                })\n            )\n        },\n        [dispatch]\n    )\n\n    return (\n        <div className={classes.Map}>\n            <Controls />\n            <DeckGL\n                viewState={{\n                    ...viewState,\n                    transitionInterpolator: new FlyToInterpolator()\n                }}\n                views={[\n                    new MapView({\n                        id: 'map',\n                        x: open ? BOARD_WIDTH : 0,\n                        width: mapWidth,\n                        controller: true\n                    })\n                ]}\n                onViewStateChange={onViewStateChangeHandler}\n                controller={true}\n                getCursor={(interactiveState: any) => {\n                    if (interactiveState.isHovering) {\n                        return 'pointer'\n                    }\n                    if (interactiveState.isDragging) {\n                        return 'grabbing'\n                    } else {\n                        return 'grab'\n                    }\n                }}\n                layers={[countryLayer, borderLayer]}\n            >\n                <StaticMap\n                    mapStyle={`mapbox://styles/nadun-malinda/cktn4hraw7jst18wbt6udj2yc`}\n                    mapboxApiAccessToken={\n                        process.env.REACT_APP_MAPBOX_API_TOKEN\n                    }\n                />\n            </DeckGL>\n        </div>\n    )\n}\n\nexport default Map\n","import { useState, useEffect, useReducer } from 'react'\nimport { Select, Skeleton } from 'antd'\nimport {\n    FrownOutlined,\n    CalendarOutlined,\n    SmileOutlined,\n    MedicineBoxOutlined\n} from '@ant-design/icons'\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    LineSeries,\n    AreaSeries,\n    HorizontalGridLines,\n    Crosshair\n} from 'react-vis'\nimport * as d3Format from 'd3-format'\nimport * as d3Array from 'd3-array'\nimport { useAppDispatch } from '../../../store/hooks'\nimport { fetchGlobalTimeline } from '../../../store/covid-slice'\nimport { TimelineData, CrosshairValues } from '../../../interfaces'\nimport classes from './WorldChart.module.scss'\n\nconst { Option } = Select\n\ntype TimelineType =\n    | 'deaths'\n    | 'new_deaths'\n    | 'confirmed'\n    | 'new_confirmed'\n    | 'recovered'\n    | 'new_recovered'\n\ninterface TimelineCategory {\n    key: string\n    deaths?: number\n    new_deaths?: number\n    confirmed?: number\n    new_confirmed?: number\n    recovered?: number\n    new_recovered?: number\n}\n\ninterface AlteredTimelineData extends TimelineData {\n    day: string\n    month: string\n    year: string\n    month_year: string\n}\n\ninterface ChartData {\n    x: string\n    y: number | undefined\n}\n\ntype ACTIONTYPE = { type: TimelineType; payload: TimelineCategory[] }\n\nconst defaultTimelineType: TimelineType = 'new_confirmed'\nconst initialChartData: ChartData[] = [{ x: '', y: 0 }]\n\nconst chartDataReducer = (\n    state: ChartData[],\n    action: ACTIONTYPE\n): ChartData[] => {\n    switch (action.type) {\n        case 'deaths':\n        case 'new_deaths':\n        case 'confirmed':\n        case 'new_confirmed':\n        case 'recovered':\n        case 'new_recovered':\n            return action.payload\n                .map((d) => {\n                    return {\n                        x: d.key,\n                        y: d[action.type]\n                    }\n                })\n                .reverse()\n\n        default:\n            return state\n    }\n}\n\nconst WorldChart = () => {\n    const [isDataReady, setIsDataReady] = useState(false)\n    const [crossshairValues, setCrossshairValues] = useState<CrosshairValues[]>(\n        []\n    )\n    const [timeline, setTimeline] = useState<TimelineData[]>([])\n    const [alteredTimeline, setAlteredTimeline] = useState<\n        AlteredTimelineData[]\n    >([])\n    const [timelineType, setTimelineType] =\n        useState<TimelineType>(defaultTimelineType)\n    const [chartData, dispatchChartData] = useReducer(\n        chartDataReducer,\n        initialChartData\n    )\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        setIsDataReady(false)\n        dispatch(fetchGlobalTimeline())\n            .then((res) => {\n                setTimeline(res.data.data)\n                setIsDataReady(true)\n            })\n            .catch((err) => {\n                console.log('Error loading timeline data: ', err)\n                setIsDataReady(true)\n            })\n    }, [dispatch])\n\n    useEffect(() => {\n        setAlteredTimeline(\n            timeline.map((d) => {\n                const date = new Date(d.date)\n                return {\n                    ...d,\n                    month: date.toLocaleString('en-us', {\n                        month: 'short'\n                    }),\n                    day: date.toLocaleString('en-us', {\n                        day: '2-digit'\n                    }),\n                    year: date.toLocaleString('en-us', {\n                        year: '2-digit'\n                    }),\n                    month_year: date.toLocaleString('en-us', {\n                        month: 'short',\n                        year: 'numeric'\n                    })\n                }\n            })\n        )\n    }, [timeline])\n\n    useEffect(() => {\n        const grouped = d3Array.group(alteredTimeline, (d) => d.month_year)\n        const timelineCategory: TimelineCategory[] = []\n\n        grouped.forEach((val, key) => {\n            timelineCategory.push({\n                key,\n                [timelineType]: d3Array.sum(val, (d) => d[timelineType])\n            })\n        })\n        dispatchChartData({ type: timelineType, payload: timelineCategory })\n    }, [alteredTimeline, timelineType])\n\n    const onChangeHandler = (value: TimelineType) => {\n        setTimelineType(value)\n    }\n\n    const onMouseLeave = () => {\n        setCrossshairValues([])\n    }\n\n    const onNearestX = (value: any) => {\n        setCrossshairValues([value])\n    }\n\n    return (\n        <div style={{ marginBottom: 20 }}>\n            <div style={{ textAlign: 'right', marginBottom: 10 }}>\n                {isDataReady ? (\n                    <Select\n                        onChange={onChangeHandler}\n                        defaultValue={defaultTimelineType}\n                        style={{ width: 150, textAlign: 'left' }}\n                    >\n                        <Option value='deaths'>Deaths</Option>\n                        <Option value='new_deaths'>New deaths</Option>\n                        <Option value='confirmed'>Confirmed</Option>\n                        <Option value='new_confirmed'>New confirmed</Option>\n                        <Option value='recovered'>Recovered</Option>\n                        <Option value='new_recovered'>New recovered</Option>\n                    </Select>\n                ) : (\n                    <Skeleton.Button\n                        style={{ width: 150, maxWidth: 335, height: 32 }}\n                        active\n                    />\n                )}\n            </div>\n            {isDataReady ? (\n                <XYPlot\n                    animation='noWobble'\n                    height={220}\n                    width={340}\n                    xType='ordinal'\n                    margin={{\n                        left: 43\n                    }}\n                    onMouseLeave={onMouseLeave}\n                >\n                    <HorizontalGridLines style={{ strokeOpacity: 0.1 }} />\n                    <LineSeries\n                        animation='noWobble'\n                        // @ts-ignore\n                        data={chartData}\n                        opacity={1}\n                        stroke='#b876ef'\n                        strokeStyle='solid'\n                        onNearestX={onNearestX}\n                        curve={'curveBasis'}\n                    />\n                    <AreaSeries\n                        animation='noWobble'\n                        // @ts-ignore\n                        data={chartData}\n                        style={{\n                            strokeWidth: '2px'\n                        }}\n                        opacity={0.4}\n                        stroke='transparent'\n                        fill='#862fcf'\n                        curve={'curveBasis'}\n                    />\n                    <Crosshair\n                        values={crossshairValues}\n                        className={'test-class-name'}\n                    >\n                        <div className={classes.Crosshair}>\n                            <div className={classes.Item}>\n                                <CalendarOutlined\n                                    className={classes.Calendar}\n                                />\n                                {crossshairValues[0]?.x}\n                            </div>\n                            <div className={classes.Item}>\n                                {(timelineType === 'confirmed' ||\n                                    timelineType === 'new_confirmed') && (\n                                    <MedicineBoxOutlined\n                                        className={classes.Cases}\n                                    />\n                                )}\n                                {(timelineType === 'deaths' ||\n                                    timelineType === 'new_deaths') && (\n                                    <FrownOutlined className={classes.Deaths} />\n                                )}\n                                {(timelineType === 'recovered' ||\n                                    timelineType === 'new_recovered') && (\n                                    <SmileOutlined\n                                        className={classes.Recovered}\n                                    />\n                                )}\n\n                                {d3Format.formatPrefix(\n                                    ',.0',\n                                    1\n                                )(crossshairValues[0]?.y)}\n                            </div>\n                        </div>\n                    </Crosshair>\n                    <XAxis\n                        tickSizeInner={0}\n                        tickSizeOuter={0}\n                        tickFormat={(d) => {\n                            const [month] = d.split(' ')\n                            if (month === 'Jan' || month === 'Jul') {\n                                return d\n                            } else {\n                                return ''\n                            }\n                        }}\n                    />\n                    <YAxis\n                        tickSizeInner={0}\n                        tickFormat={(d) => {\n                            return d3Format.format('~s')(d)\n                        }}\n                    />\n                </XYPlot>\n            ) : (\n                <Skeleton.Button\n                    style={{ width: 335, maxWidth: 335, height: 220 }}\n                    active\n                />\n            )}\n        </div>\n    )\n}\n\nexport default WorldChart\n","import { useEffect } from 'react'\nimport { batch } from 'react-redux'\nimport { Statistic, Skeleton, Space } from 'antd'\nimport { useAppSelector, useAppDispatch } from '../../../../store/hooks'\nimport { fetchAllCountriesAndCovidData } from '../../../../store/country-slice'\nimport { fitToBounds } from '../../../../store/map-slice'\nimport { fetchCountryCovid } from '../../../../store/covid-slice'\nimport { setBoard } from '../../../../store/board-slice'\nimport classes from './CountryList.module.scss'\nimport { Country } from '../../../../interfaces'\n\nconst CountryList = () => {\n    const { countries, loading } = useAppSelector((state) => state.country)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        dispatch(fetchAllCountriesAndCovidData())\n    }, [dispatch])\n\n    const onClickHandler = ({ cca2 }: Country) => {\n        batch(() => {\n            dispatch(fetchCountryCovid(cca2))\n            dispatch(fitToBounds(cca2))\n            dispatch(setBoard('country'))\n        })\n    }\n\n    return (\n        <>\n            {loading ? (\n                <Space direction='vertical'>\n                    <Skeleton.Button\n                        style={{ width: 335, maxWidth: 335, height: 60 }}\n                        active\n                    />\n                    <Skeleton.Button\n                        style={{ width: 335, maxWidth: 335, height: 60 }}\n                        active\n                    />\n                    <Skeleton.Button\n                        style={{ width: 335, maxWidth: 335, height: 60 }}\n                        active\n                    />\n                    <Skeleton.Button\n                        style={{ width: 335, maxWidth: 335, height: 60 }}\n                        active\n                    />\n                    <Skeleton.Button\n                        style={{ width: 335, maxWidth: 335, height: 60 }}\n                        active\n                    />\n                    <Skeleton.Button\n                        style={{ width: 335, maxWidth: 335, height: 60 }}\n                        active\n                    />\n                </Space>\n            ) : (\n                <ul className={classes.List}>\n                    {countries.map((country) => (\n                        <li\n                            key={country.cca2}\n                            className={classes.ListItem}\n                            onClick={() => onClickHandler(country)}\n                        >\n                            <p className={classes.Name}>\n                                <span className={classes.Flag}>\n                                    {country.flag}\n                                </span>\n                                {country.name}\n                            </p>\n                            <div className={classes.Stats}>\n                                <Statistic\n                                    title='Total cases'\n                                    value={country.latest?.confirmed}\n                                />\n                                <Statistic\n                                    title='Total deaths'\n                                    value={country.latest?.deaths}\n                                />\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </>\n    )\n}\n\nexport default CountryList\n","import WorldChart from '../../Charts/WorldChart/WorldChart'\nimport CountryList from './CountryList/CountryList'\nimport classes from './WorldBoard.module.scss'\n\nconst WorldPanel = () => {\n    return (\n        <>\n            <div className={classes.Chart}>\n                <WorldChart />\n            </div>\n            <div className={classes.List}>\n                <CountryList />\n            </div>\n        </>\n    )\n}\n\nexport default WorldPanel\n","import { Skeleton, Space } from 'antd'\n\nconst GeneralSkeleton = () => {\n    return (\n        <Space direction='vertical'>\n            <Space>\n                <Skeleton.Button\n                    active\n                    shape='square'\n                    style={{ width: 30, height: 30 }}\n                    size='small'\n                />\n                <Skeleton.Button\n                    shape='square'\n                    style={{ width: 100, height: 30 }}\n                    active\n                    size='small'\n                />\n            </Space>\n\n            <Space direction='vertical' size='small' style={{ rowGap: 0 }}>\n                <Skeleton.Button\n                    shape='square'\n                    style={{ width: 140, height: '15.7px' }}\n                    active\n                    size='small'\n                />\n                <Skeleton.Button\n                    shape='square'\n                    style={{ width: 150, height: 20 }}\n                    active\n                    size='small'\n                />\n            </Space>\n        </Space>\n    )\n}\n\nexport default GeneralSkeleton\n","import { Skeleton, Space } from 'antd'\n\nconst CovidListSkeleton = () => {\n    return (\n        <Space>\n            <Skeleton.Button\n                active\n                shape='round'\n                style={{ width: 30, height: 30 }}\n                size='small'\n            />\n            <Space\n                direction='vertical'\n                size='small'\n                style={{ rowGap: 0, lineHeight: '18px' }}\n            >\n                <Skeleton.Input\n                    active\n                    size='small'\n                    style={{ width: 70, height: 10, verticalAlign: 'middle' }}\n                />\n                <Skeleton.Input\n                    active\n                    size='small'\n                    style={{ width: 90, height: 12, verticalAlign: 'baseline' }}\n                />\n            </Space>\n            {/* <Skeleton.Button\n                active\n                shape='square'\n                style={{ width: 150, height: 30 }}\n                size='small'\n            /> */}\n        </Space>\n    )\n}\n\nexport default CovidListSkeleton\n","import { Statistic } from 'antd'\nimport {\n    FrownOutlined,\n    ArrowLeftOutlined,\n    SmileOutlined,\n    MedicineBoxOutlined\n} from '@ant-design/icons'\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks'\nimport { setBoard } from '../../../store/board-slice'\nimport GeneralSkeleton from './GeneralSkeleton/GeneralSkeleton'\nimport CovidListSkeleton from './CovidListSkeleton/CovidListSkeleton'\nimport classes from './CountryBoard.module.scss'\n\nconst CountryBoard = () => {\n    const { country, loading } = useAppSelector((state) => state.covid)\n    const dispatch = useAppDispatch()\n\n    const backHandler = () => {\n        dispatch(setBoard('world'))\n    }\n\n    return (\n        <div>\n            <p className={classes.Back} onClick={backHandler}>\n                <ArrowLeftOutlined style={{ marginRight: 8 }} />\n                Back\n            </p>\n            <div className={classes.General}>\n                {loading ? (\n                    <GeneralSkeleton />\n                ) : (\n                    <>\n                        <h3 className={classes.CountryName}>\n                            <span className={classes.Flag}>{country.flag}</span>\n                            {country.name}\n                        </h3>\n\n                        <Statistic\n                            title='Population'\n                            value={country.population}\n                        />\n                    </>\n                )}\n            </div>\n\n            <ul className={classes.Covid}>\n                <li className={classes.ListItem}>\n                    {loading ? (\n                        <CovidListSkeleton />\n                    ) : (\n                        <>\n                            <FrownOutlined\n                                className={`${classes.Icon} ${classes.Deaths}`}\n                            />\n                            <Statistic\n                                title='Deaths'\n                                value={country.latest?.deaths}\n                            />\n                        </>\n                    )}\n                </li>\n                <li className={classes.ListItem}>\n                    {loading ? (\n                        <CovidListSkeleton />\n                    ) : (\n                        <>\n                            <MedicineBoxOutlined\n                                className={`${classes.Icon} ${classes.Confirmed}`}\n                            />\n                            <Statistic\n                                title='Confirmed'\n                                value={country.latest?.confirmed}\n                            />\n                        </>\n                    )}\n                </li>\n                <li className={classes.ListItem}>\n                    {loading ? (\n                        <CovidListSkeleton />\n                    ) : (\n                        <>\n                            <MedicineBoxOutlined\n                                className={`${classes.Icon} ${classes.Critical}`}\n                            />\n                            <Statistic\n                                title='Critical'\n                                value={country.latest?.critical}\n                            />\n                        </>\n                    )}\n                </li>\n                <li className={classes.ListItem}>\n                    {loading ? (\n                        <CovidListSkeleton />\n                    ) : (\n                        <>\n                            <SmileOutlined\n                                className={`${classes.Icon} ${classes.Recovered}`}\n                            />\n                            <Statistic\n                                title='Recovered'\n                                value={country.latest?.recovered}\n                            />\n                        </>\n                    )}\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default CountryBoard\n","import { LeftOutlined, RightOutlined } from '@ant-design/icons'\nimport { useAppSelector, useAppDispatch } from '../../store/hooks'\nimport WorldBoard from './WorldBoard/WorldBoard'\nimport CountryBoard from './CountryBoard/CountryBoard'\nimport classes from './Board.module.scss'\nimport { toggleBoard } from '../../store/board-slice'\n\nconst Board = () => {\n    const { board, open } = useAppSelector((state) => state.board)\n    const dispatch = useAppDispatch()\n\n    const onToggle = () => {\n        dispatch(toggleBoard(!open))\n    }\n\n    return (\n        <div\n            className={`${classes.Board} ${\n                open ? classes.SlideRight : classes.SlideLeft\n            }`}\n        >\n            <div className={classes.Toggler} onClick={onToggle}>\n                <div className={classes.IconWrap}>\n                    {open && <LeftOutlined className={classes.Icon} />}\n                    {!open && <RightOutlined className={classes.Icon} />}\n                </div>\n            </div>\n            <span className={board === 'country' ? classes.Hide : ''}>\n                <WorldBoard />\n            </span>\n            {board === 'country' && <CountryBoard />}\n        </div>\n    )\n}\n\nexport default Board\n","import { useState, useEffect } from 'react'\n\nconst useDebounce = (value: string, delay: number): string => {\n    const [debouncedvalue, setDebouncedValue] = useState(value)\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value)\n        }, delay)\n\n        // clean up and cancel the timeout when value or delay change\n        return () => clearTimeout(handler)\n    }, [value, delay])\n\n    // this will return the latest value,\n    // if \"value\" hasn't been updated within last \"delay\" time\n    return debouncedvalue\n}\n\nexport default useDebounce\n","import { useState, useEffect } from 'react'\nimport { batch } from 'react-redux'\nimport { useAppDispatch } from '../../store/hooks'\nimport { fitToBounds } from '../../store/map-slice'\nimport { fetchCountryCovid } from '../../store/covid-slice'\nimport { AutoComplete } from 'antd'\nimport useDebounce from '../../utils/deBounce'\nimport classes from './CountrySearch.module.scss'\nimport {\n    fetchCountryByName,\n    CountryData as CountryDataInterface\n} from '../../store/country-slice'\n\ninterface Option {\n    value: string\n    data: CountryDataInterface\n}\n\nconst CountrySearch = () => {\n    const [text, setText] = useState('')\n    const [options, setOptions] = useState<Option[]>([])\n    const debounceSearchText = useDebounce(text, 300)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        if (debounceSearchText === '') {\n            setOptions([])\n            return\n        }\n\n        dispatch(fetchCountryByName(debounceSearchText))\n            .then((res) => {\n                setOptions(\n                    res.data.map((country) => {\n                        return {\n                            value: country.name.common,\n                            data: country\n                        }\n                    })\n                )\n            })\n            .catch((err) => {\n                console.log('Error while searching country: ', err)\n            })\n    }, [debounceSearchText, dispatch])\n\n    const onSelectHandler = (_: string, option: Option | any) => {\n        const { cca2 } = option.data\n        batch(() => {\n            dispatch(fetchCountryCovid(cca2))\n            dispatch(fitToBounds(cca2))\n        })\n        setText('')\n    }\n\n    const onSearchHandler = (value: string) => {\n        setText(value)\n    }\n\n    return (\n        <div className={classes.CountrySearch}>\n            <AutoComplete\n                value={text}\n                clearIcon={true}\n                className={classes.Search}\n                options={options}\n                size='large'\n                onSelect={onSelectHandler}\n                onSearch={onSearchHandler}\n                placeholder='Search for country ...'\n            />\n        </div>\n    )\n}\n\nexport default CountrySearch\n","import Map from './components/Map/Map'\nimport Board from './components/Board/Board'\nimport CountrySearch from './components/CountrySearch/CountrySearch'\nimport 'antd/dist/antd.css'\nimport '../node_modules/react-vis/dist/styles/examples.scss'\nimport './styles/styles.scss'\n\nconst App = () => {\n    return (\n        <>\n            <Map />\n            <CountrySearch />\n            <Board />\n        </>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/index'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Back\":\"CountryBoard_Back__2d8La\",\"General\":\"CountryBoard_General__1CLQW\",\"CountryName\":\"CountryBoard_CountryName__2Wvdv\",\"Flag\":\"CountryBoard_Flag__1tQqN\",\"Covid\":\"CountryBoard_Covid__2vpor\",\"ListItem\":\"CountryBoard_ListItem__SdRHo\",\"Icon\":\"CountryBoard_Icon__M7MtO\",\"Deaths\":\"CountryBoard_Deaths__T0c1c\",\"Confirmed\":\"CountryBoard_Confirmed__2bBR6\",\"Recovered\":\"CountryBoard_Recovered__2C6eE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__3IbYL\",\"SlideLeft\":\"Board_SlideLeft__3XFHE\",\"Toggler\":\"Board_Toggler__3t6su\",\"IconWrap\":\"Board_IconWrap__1FCIU\",\"Hide\":\"Board_Hide__2Hv9P\",\"Icon\":\"Board_Icon__1dJCF\",\"SlideRight\":\"Board_SlideRight__givod\",\"slide-right\":\"Board_slide-right__3Q4En\",\"slide-left\":\"Board_slide-left__1HIlr\"};"],"sourceRoot":""}