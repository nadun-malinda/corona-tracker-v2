{"version":3,"sources":["components/Charts/WorldChart/WorldChart.module.scss","components/Board/WorldBoard/CountryList/CountryList.module.scss","components/Board/WorldBoard/WorldBoard.module.scss","components/CountrySearch/CountrySearch.module.scss","components/Map/Map.module.scss","utils/utils.ts","store/covid-slice.ts","store/country-slice.ts","store/map-slice.ts","consts.ts","store/board-slice.ts","store/index.ts","store/hooks.ts","components/Map/layers/CountryLayerHook.tsx","components/Map/layers/BorderLayerHook.tsx","components/Map/Map.tsx","components/Charts/WorldChart/WorldChart.tsx","components/Board/WorldBoard/CountryList/CountryList.tsx","components/Board/WorldBoard/WorldBoard.tsx","components/Board/CountryBoard/GeneralSkeleton/GeneralSkeleton.tsx","components/Board/CountryBoard/CovidListSkeleton/CovidListSkeleton.tsx","components/Board/CountryBoard/CountryBoard.tsx","components/Board/Board.tsx","utils/deBounce.ts","components/CountrySearch/CountrySearch.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Board/CountryBoard/CountryBoard.module.scss","components/Board/Board.module.scss"],"names":["module","exports","boundaryBoxData","bbDataFile","boundaryGeoJsonData","countryGeoJsonFile","getFitBounds","alpha2Code","viewState","bounds","bb","getBoundsByAlpha2","console","log","WebMercatorViewport","fitBounds","padding","width","height","longitude","latitude","zoom","covidSlice","createSlice","name","initialState","country","flag","cca2","cca3","population","latest","timeline","loading","reducers","setCovidCountry","state","action","payload","setLoading","type","fetchCountryCovid","dispatch","getState","a","axios","get","process","response","data","code","latest_data","countries","filter","c","countrySlice","feature","setCountries","setCountryFeature","actions","mapStyle","bearing","pitch","transitionDuration","mapWidth","window","innerWidth","mapSlice","setMapStyle","setViewState","setMapWidth","fitToBounds","map","batch","features","find","fe","properties","ISO2","getFeatureByAplha2","boardSlice","board","open","setBoard","setOpen","store","configureStore","reducer","covid","middleware","getDefaultMiddleware","serializableCheck","useAppSelector","useSelector","useAppDispatch","useDispatch","useCountryLayer","useState","countryLayer","setCountryLayer","useEffect","lr","GeoJsonLayer","id","stroked","filled","pickable","autoHighlight","highlightColor","getFillColor","getLineColor","d","lineWidthMinPixels","onClick","info","object","useBorderLayer","borderLayer","setBorderLayer","boundaryData","countriesGeoJson","initialBorderFetaure","geometry","Map","layerData","borderLayerData","setBorderLayerData","onViewStateChangeHandler","useCallback","className","classes","transitionInterpolator","FlyToInterpolator","views","MapView","x","controller","onViewStateChange","getCursor","interactiveState","isHovering","isDragging","layers","mapboxApiAccessToken","Option","Select","defaultTimelineType","initialChartData","y","chartDataReducer","key","reverse","WorldChart","isDataReady","setIsDataReady","crossshairValues","setCrossshairValues","setTimeline","alteredTimeline","setAlteredTimeline","timelineType","setTimelineType","useReducer","chartData","dispatchChartData","then","res","catch","err","date","Date","month","toLocaleString","day","year","month_year","grouped","d3Array","timelineCategory","forEach","val","push","style","marginBottom","textAlign","onChange","value","defaultValue","animation","xType","margin","left","onMouseLeave","strokeOpacity","opacity","stroke","strokeStyle","onNearestX","curve","strokeWidth","fill","values","Crosshair","Item","CalendarOutlined","Calendar","MedicineBoxOutlined","Cases","FrownOutlined","Deaths","SmileOutlined","Recovered","d3Format","tickSizeInner","tickSizeOuter","tickFormat","split","CountryList","countriesResponse","_dispatch","_useSttae","covidResponse","countryFlags","countryCovid","cc","cf","confirmed","sort","b","active","List","ListItem","onClickHandler","Name","Flag","Stats","title","deaths","WorldPanel","Chart","GeneralSkeleton","direction","Button","shape","size","rowGap","CovidListSkeleton","lineHeight","Input","verticalAlign","CountryBoard","Back","ArrowLeftOutlined","marginRight","General","CountryName","Covid","Icon","Confirmed","Critical","critical","recovered","Board","SlideRight","SlideLeft","Toggler","toggleBoard","IconWrap","LeftOutlined","RightOutlined","Hide","WorldBoard","useDebounce","delay","debouncedvalue","setDebouncedValue","handler","setTimeout","clearTimeout","CountrySearch","text","setText","options","setOptions","debounceSearchText","common","clearIcon","Search","onSelect","_","option","onSearch","placeholder","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.486adce1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Crosshair\":\"WorldChart_Crosshair__3eEK-\",\"Item\":\"WorldChart_Item__j0UGC\",\"Calendar\":\"WorldChart_Calendar__3hsC0\",\"Cases\":\"WorldChart_Cases__1gyFR\",\"Deaths\":\"WorldChart_Deaths__1Q1SE\",\"Recovered\":\"WorldChart_Recovered__3s6lG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"CountryList_List__25G8c\",\"ListItem\":\"CountryList_ListItem__2ZVnX\",\"Stats\":\"CountryList_Stats__3-WxK\",\"Flag\":\"CountryList_Flag__329Is\",\"Name\":\"CountryList_Name__3mFui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"WorldBoard_List__1-ORZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountrySearch\":\"CountrySearch_CountrySearch__1JgHu\",\"Search\":\"CountrySearch_Search__2mMYU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"view-map\":\"Map_view-map__2Vah8\"};","import { WebMercatorViewport } from '@deck.gl/core'\nimport {\n    ViewState,\n    BoundaryBoxData,\n    FeatureCollection,\n    Feature\n} from '../interfaces'\nimport bbDataFile from '../data/boundary-boxes.json'\nimport countryGeoJsonFile from '../data/countries-geojson.json'\n\nconst boundaryBoxData = bbDataFile as BoundaryBoxData\nconst boundaryGeoJsonData = countryGeoJsonFile as FeatureCollection\n\nexport const getFeatureByAplha2 = (\n    alpha2Code: string | number\n): Feature | [] => {\n    const feature = boundaryGeoJsonData.features.find(\n        (fe) => fe.properties.ISO2 === alpha2Code\n    )\n\n    return feature ? feature : []\n}\n\nexport const getBoundsByAlpha2 = (alpha2Code: string | number) => {\n    const bb = boundaryBoxData[alpha2Code]?.[1]\n        ? boundaryBoxData[alpha2Code][1]\n        : [null, [null, null, null, null]]\n    return [\n        [bb[0], bb[1]],\n        [bb[2], bb[3]]\n    ]\n}\n\nexport const getFitBounds = (alpha2Code: string, viewState: ViewState) => {\n    const bounds = getBoundsByAlpha2(alpha2Code)\n    if (bounds[0][0] === null) return false\n    console.log('bounds: ', bounds)\n    const vp = new WebMercatorViewport({ ...viewState }) as unknown as ViewState\n    const { width, height, longitude, latitude, zoom } = vp.fitBounds(bounds, {\n        padding: 60\n    })\n\n    return { width, height, longitude, latitude, zoom }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport axios from 'axios'\nimport {\n    TimelineData,\n    Country,\n    CovidCountriesResponseData\n} from '../interfaces'\n\ninterface fetchTimelineResponse {\n    data: {\n        data: TimelineData[]\n    }\n}\n\ninterface CovidCountryResponse {\n    data: {\n        data: CovidCountriesResponseData\n    }\n}\n\ninterface CovidCountriesResponse {\n    data: {\n        data: CovidCountriesResponseData[]\n    }\n}\n\ninterface CovidState {\n    country: Country\n    loading: boolean\n}\n\nconst initialState: CovidState = {\n    country: {\n        name: '',\n        flag: '',\n        cca2: '',\n        cca3: '',\n        population: 0,\n        latest: null,\n        timeline: null\n    },\n    loading: false\n}\n\nconst covidSlice = createSlice({\n    name: 'covid',\n    initialState,\n    reducers: {\n        setCovidCountry(state, action: PayloadAction<Country>) {\n            state.country = action.payload\n        },\n        setLoading(state, action: PayloadAction<boolean>) {\n            state.loading = action.payload\n        }\n    }\n})\n\n// action creators\nexport const setCovidCountry = (covidCountry: Country) => ({\n    type: 'covid/setCovidCountry',\n    payload: covidCountry\n})\nexport const setLoading = (loading: boolean) => ({\n    type: 'covid/setLoading',\n    payload: loading\n})\n\n// thunks\nexport const fetchGlobalTimeline = (): AppThunk<\n    Promise<fetchTimelineResponse>\n> => {\n    return async () => {\n        return await axios.get(`${process.env.REACT_APP_CORONA_API}/timeline`)\n    }\n}\n\nexport const fetchCovidCountries = (): AppThunk<\n    Promise<CovidCountriesResponse>\n> => {\n    return async (_dispatch, _useSttae) => {\n        return await axios.get(`${process.env.REACT_APP_CORONA_API}/countries`)\n    }\n}\n\nexport const fetchCountryCovid = (cca2: string): AppThunk => {\n    return async (dispatch, getState) => {\n        try {\n            dispatch(setLoading(true))\n\n            const response: CovidCountryResponse = await axios.get(\n                `${process.env.REACT_APP_CORONA_API}/countries/${cca2}`\n            )\n\n            const { name, code, population, latest_data, timeline } =\n                response.data.data\n\n            console.log('response: ', response)\n            const { countries } = getState().country\n            const [country] = countries.filter((c) => c.cca2 === cca2)\n            console.log('flag: ', country)\n            dispatch(\n                setCovidCountry({\n                    name,\n                    cca2: code,\n                    population,\n                    latest: latest_data,\n                    timeline,\n                    flag: country.flag\n                })\n            )\n\n            dispatch(setLoading(false))\n        } catch (error) {\n            console.log('Error while loading country covid data: ', error)\n            dispatch(setLoading(false))\n        }\n    }\n}\n\nexport default covidSlice\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport axios from 'axios'\nimport { fetchCovidCountries } from './covid-slice'\nimport { Country, Feature } from '../interfaces'\n\ninterface CountryName {\n    common: string\n    nativeName: any\n    official: string\n}\n\nexport interface CountryData {\n    name: CountryName\n    cca2: string\n    cca3: string\n    flag: string\n    population: number\n}\n\ninterface CountrySearchResponse {\n    data: CountryData[]\n}\n\ninterface CountryState {\n    countries: Country[]\n    country: Country\n    loading: boolean\n}\n\nconst initialState: CountryState = {\n    countries: [],\n    country: {\n        name: '',\n        flag: '',\n        latest: null,\n        cca2: '',\n        cca3: '',\n        population: 0,\n        feature: []\n    },\n    loading: false\n}\n\nconst countrySlice = createSlice({\n    name: 'country',\n    initialState,\n    reducers: {\n        setCountries(state, action: PayloadAction<Country[]>) {\n            state.countries = action.payload\n        },\n        setCountryFeature(state, action: PayloadAction<Feature>) {\n            state.country = { ...state.country, feature: action.payload }\n        },\n        setLoading(state, action: PayloadAction<boolean>) {\n            state.loading = action.payload\n        }\n    }\n})\n\n// action creators\nexport const setCountries = (countries: Country[]) => ({\n    type: 'country/setCountries',\n    payload: countries\n})\n\nexport const setCountryFeature = (feature: Feature | []) => ({\n    type: 'country/setCountryFeature',\n    payload: feature\n})\n\nexport const setLoading = (loading: boolean) => ({\n    type: 'country/setLoading',\n    payload: loading\n})\n\nexport const fetchCountryByName = (\n    name: string\n): AppThunk<Promise<CountrySearchResponse>> => {\n    return async () => {\n        return await axios.get(\n            `${process.env.REACT_APP_RESTCOUNTRIES_API}/name/${name}`\n        )\n    }\n}\n\nexport const fetchAllCountries = (): AppThunk<\n    Promise<CountrySearchResponse>\n> => {\n    return async () => {\n        return await axios.get(\n            `${process.env.REACT_APP_RESTCOUNTRIES_API}/all?fields=flag,cca2`\n        )\n    }\n}\n\nexport const fetchAllCountriesAndCovidData = (): AppThunk => {\n    return async (dispatch) => {\n        try {\n            dispatch(setLoading(true))\n            const countriesResponse = await dispatch(fetchAllCountries())\n            const covidResponse = await dispatch(fetchCovidCountries())\n            const countryFlags = countriesResponse.data\n            const countryCovid = covidResponse.data.data\n\n            const countries = countryCovid\n                .map((cc) => {\n                    const flag = countryFlags.find((cf) => cf.cca2 === cc.code)\n                    return {\n                        name: cc.name,\n                        cca2: cc.code,\n                        latest: cc.latest_data,\n                        flag: flag ? flag.flag : ''\n                    }\n                })\n                .filter((c) => c.latest.confirmed > 100000)\n                .sort((a, b) => b.latest.confirmed - a.latest.confirmed)\n\n            dispatch(setCountries(countries))\n            dispatch(setLoading(false))\n        } catch (error) {\n            console.log('Error while loading country and covid data: ', error)\n            dispatch(setLoading(false))\n        }\n    }\n}\n\nexport const countryActions = countrySlice.actions\nexport default countrySlice\n","import { batch } from 'react-redux'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport { MapboxStyle, ViewState } from '../interfaces'\nimport { getFitBounds, getFeatureByAplha2 } from '../utils/utils'\nimport { setCountryFeature } from './country-slice'\nimport { BOARD_WIDTH } from '../consts'\n\ninterface MapState {\n    mapStyle: MapboxStyle\n    viewState: ViewState\n    mapWidth: number\n}\n\nconst initialState: MapState = {\n    mapStyle: 'dark-v10',\n    viewState: {\n        bearing: 0,\n        height: 0,\n        latitude: 43.047295,\n        longitude: 11.753803,\n        pitch: 0,\n        width: 0,\n        zoom: 1.5,\n        transitionDuration: 'auto'\n    },\n    mapWidth: window.innerWidth - BOARD_WIDTH\n}\n\nconst mapSlice = createSlice({\n    name: 'map',\n    initialState,\n    reducers: {\n        setMapStyle(state, action: PayloadAction<MapboxStyle>) {\n            state.mapStyle = action.payload\n        },\n        setViewState(state, action: PayloadAction<ViewState>) {\n            state.viewState = { ...state.viewState, ...action.payload }\n        },\n        setMapWidth(state, action: PayloadAction<number>) {\n            state.mapWidth = action.payload\n        }\n    }\n})\n\nexport const setMapStyle = (mapStyle: MapboxStyle) => ({\n    type: 'map/setMapStyle',\n    payload: mapStyle\n})\nexport const setViewState = (viewState: ViewState) => ({\n    type: 'map/setViewState',\n    payload: viewState\n})\nexport const setMapWidth = (width: number) => ({\n    type: 'map/setMapWidth',\n    payload: width\n})\n\nexport const fitToBounds = (alpha2Code: string): AppThunk => {\n    return (dispatch, getState) => {\n        const { viewState } = getState().map\n        const bounds = getFitBounds(alpha2Code, viewState)\n\n        if (bounds) {\n            const { longitude, latitude, zoom } = bounds\n            batch(() => {\n                dispatch(setCountryFeature(getFeatureByAplha2(alpha2Code)))\n                dispatch(setViewState({ latitude, longitude, zoom }))\n            })\n        }\n    }\n}\n\nexport const mapActions = mapSlice.actions\nexport default mapSlice\n","export const BOARD_WIDTH = 375\n","import { batch } from 'react-redux'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport { Board } from '../interfaces'\nimport { setMapWidth } from './map-slice'\nimport { BOARD_WIDTH } from '../consts'\n\ninterface BoardState {\n    board: Board\n    open: boolean\n}\n\nconst initialState: BoardState = {\n    board: 'world',\n    open: true\n}\n\nconst boardSlice = createSlice({\n    name: 'board',\n    initialState,\n    reducers: {\n        setBoard(state, action: PayloadAction<Board>) {\n            state.board = action.payload\n        },\n        setOpen(state, action: PayloadAction<boolean>) {\n            state.open = action.payload\n        }\n    }\n})\n\nexport const setBoard = (board: Board) => ({\n    type: 'board/setBoard',\n    payload: board\n})\nexport const setOpen = (open: boolean) => ({\n    type: 'board/setOpen',\n    payload: open\n})\n\nexport const toggleBoard = (open: boolean): AppThunk => {\n    return (dispatch, getState) => {\n        batch(() => {\n            dispatch(setOpen(open))\n            dispatch(\n                setMapWidth(\n                    open ? window.innerWidth - BOARD_WIDTH : window.innerWidth\n                )\n            )\n        })\n    }\n}\n\nexport const boardActions = boardSlice.actions\nexport default boardSlice\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport mapSlice from './map-slice'\nimport boardSlice from './board-slice'\nimport countrySlice from './country-slice'\nimport covidSlice from './covid-slice'\n\nconst store = configureStore({\n    reducer: {\n        map: mapSlice.reducer,\n        board: boardSlice.reducer,\n        country: countrySlice.reducer,\n        covid: covidSlice.reducer\n    },\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware({\n            serializableCheck: false\n        })\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>\nexport default store\n","import { TypedUseSelectorHook, useSelector, useDispatch } from 'react-redux'\nimport { RootState, AppDispatch } from './index'\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n","import { useState, useEffect } from 'react'\nimport { batch } from 'react-redux'\nimport { GeoJsonLayer } from '@deck.gl/layers'\nimport { useAppDispatch } from '../../../store/hooks'\nimport { Feature, FeatureCollection } from '../../../interfaces'\nimport { fitToBounds } from '../../../store/map-slice'\nimport { fetchCountryCovid } from '../../../store/covid-slice'\nimport { setBoard } from '../../../store/board-slice'\n\nconst useCountryLayer = (data: FeatureCollection): any => {\n    const [countryLayer, setCountryLayer] = useState({})\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        const lr = new GeoJsonLayer({\n            id: 'countries',\n            data,\n            stroked: true,\n            filled: true,\n            pickable: true,\n            autoHighlight: true,\n            highlightColor: [245, 198, 0, 10],\n            getFillColor: [0, 0, 0, 0],\n            getLineColor: (d) => [0, 0, 0, 0],\n            lineWidthMinPixels: 1,\n            onClick: (info: any | { object: Feature }) => {\n                console.log('click :', info)\n                batch(() => {\n                    dispatch(fetchCountryCovid(info.object.properties.ISO2))\n                    dispatch(fitToBounds(info.object.properties.ISO2))\n                    dispatch(setBoard('country'))\n                })\n            }\n        })\n\n        setCountryLayer(lr)\n    }, [data, dispatch])\n\n    return { countryLayer }\n}\n\nexport default useCountryLayer\n","import { useState, useEffect } from 'react'\nimport { GeoJsonLayer } from '@deck.gl/layers'\nimport { Feature } from '../../../interfaces'\n\nconst useBorderLayer = (data: Feature | []) => {\n    const [borderLayer, setBorderLayer] = useState({})\n\n    useEffect(() => {\n        const lr = new GeoJsonLayer({\n            id: 'border-layer',\n            data,\n            stroked: true,\n            getFillColor: [0, 0, 0, 0],\n            getLineColor: (d) => [245, 198, 0, 200],\n            lineWidthMinPixels: 2\n        })\n\n        setBorderLayer(lr)\n    }, [data])\n\n    return { borderLayer }\n}\n\nexport default useBorderLayer\n","import { useState, useCallback, useEffect } from 'react'\nimport { useAppSelector, useAppDispatch } from '../../store/hooks'\nimport { setViewState } from '../../store/map-slice'\nimport DeckGL from '@deck.gl/react'\nimport { FlyToInterpolator, MapView } from '@deck.gl/core'\nimport { StaticMap } from 'react-map-gl'\nimport useCountryLayer from './layers/CountryLayerHook'\nimport useBorderLayer from './layers/BorderLayerHook'\nimport { ViewState, FeatureCollection, Feature } from '../../interfaces'\nimport { BOARD_WIDTH } from '../../consts'\n// import { json, csv } from 'd3-fetch'\nimport countriesGeoJson from '../../data/countries-geojson.json'\nimport classes from './Map.module.scss'\n\nconst boundaryData = countriesGeoJson as FeatureCollection\nconst initialBorderFetaure: Feature = {\n    type: 'Feature',\n    properties: {},\n    geometry: {}\n}\n\nconst Map = () => {\n    const [layerData] = useState<FeatureCollection>(boundaryData)\n    const [borderLayerData, setBorderLayerData] = useState<Feature | []>(\n        initialBorderFetaure\n    )\n    const { viewState, mapWidth } = useAppSelector((state) => state.map)\n    const { country } = useAppSelector((state) => state.country)\n    const { open } = useAppSelector((state) => state.board)\n    const { countryLayer } = useCountryLayer(layerData)\n    const { borderLayer } = useBorderLayer(borderLayerData)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        country.feature && setBorderLayerData(country.feature)\n    }, [country])\n\n    const onViewStateChangeHandler = useCallback(\n        ({ viewState }: { viewState: ViewState }) => {\n            const { bearing, width, height, latitude, longitude, pitch, zoom } =\n                viewState\n            dispatch(\n                setViewState({\n                    bearing,\n                    width,\n                    height,\n                    latitude,\n                    longitude,\n                    pitch,\n                    zoom\n                })\n            )\n        },\n        [dispatch]\n    )\n\n    return (\n        <div className={classes.Map}>\n            <DeckGL\n                viewState={{\n                    ...viewState,\n                    transitionInterpolator: new FlyToInterpolator()\n                }}\n                views={[\n                    new MapView({\n                        id: 'map',\n                        x: open ? BOARD_WIDTH : 0,\n                        width: mapWidth,\n                        controller: true\n                    })\n                ]}\n                onViewStateChange={onViewStateChangeHandler}\n                controller={true}\n                getCursor={(interactiveState: any) => {\n                    if (interactiveState.isHovering) {\n                        return 'pointer'\n                    }\n                    if (interactiveState.isDragging) {\n                        return 'grabbing'\n                    } else {\n                        return 'grab'\n                    }\n                }}\n                layers={[countryLayer, borderLayer]}\n            >\n                <StaticMap\n                    mapStyle={`mapbox://styles/nadun-malinda/cktn4hraw7jst18wbt6udj2yc`}\n                    mapboxApiAccessToken={\n                        process.env.REACT_APP_MAPBOX_API_TOKEN\n                    }\n                />\n            </DeckGL>\n        </div>\n    )\n}\n\nexport default Map\n","import { useState, useEffect, useReducer } from 'react'\nimport { Select } from 'antd'\nimport {\n    FrownOutlined,\n    CalendarOutlined,\n    SmileOutlined,\n    MedicineBoxOutlined\n} from '@ant-design/icons'\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    LineSeries,\n    AreaSeries,\n    HorizontalGridLines,\n    Crosshair\n} from 'react-vis'\nimport * as d3Format from 'd3-format'\nimport * as d3Array from 'd3-array'\nimport { useAppDispatch } from '../../../store/hooks'\nimport { fetchGlobalTimeline } from '../../../store/covid-slice'\nimport { TimelineData, CrosshairValues } from '../../../interfaces'\nimport classes from './WorldChart.module.scss'\n\nconst { Option } = Select\n\ntype TimelineType =\n    | 'deaths'\n    | 'new_deaths'\n    | 'confirmed'\n    | 'new_confirmed'\n    | 'recovered'\n    | 'new_recovered'\n\ninterface TimelineCategory {\n    key: string\n    deaths?: number\n    new_deaths?: number\n    confirmed?: number\n    new_confirmed?: number\n    recovered?: number\n    new_recovered?: number\n}\n\ninterface AlteredTimelineData extends TimelineData {\n    day: string\n    month: string\n    year: string\n    month_year: string\n}\n\ninterface ChartData {\n    x: string\n    y: number | undefined\n}\n\ntype ACTIONTYPE = { type: TimelineType; payload: TimelineCategory[] }\n\nconst defaultTimelineType: TimelineType = 'deaths'\nconst initialChartData: ChartData[] = [{ x: '', y: 0 }]\n\nconst chartDataReducer = (\n    state: ChartData[],\n    action: ACTIONTYPE\n): ChartData[] => {\n    switch (action.type) {\n        case 'deaths':\n        case 'new_deaths':\n        case 'confirmed':\n        case 'new_confirmed':\n        case 'recovered':\n        case 'new_recovered':\n            return action.payload\n                .map((d) => {\n                    return {\n                        x: d.key,\n                        y: d[action.type]\n                    }\n                })\n                .reverse()\n\n        default:\n            return state\n    }\n}\n\nconst WorldChart = () => {\n    const [isDataReady, setIsDataReady] = useState(false)\n    const [crossshairValues, setCrossshairValues] = useState<CrosshairValues[]>(\n        []\n    )\n    const [timeline, setTimeline] = useState<TimelineData[]>([])\n    const [alteredTimeline, setAlteredTimeline] = useState<\n        AlteredTimelineData[]\n    >([])\n    const [timelineType, setTimelineType] =\n        useState<TimelineType>(defaultTimelineType)\n    const [chartData, dispatchChartData] = useReducer(\n        chartDataReducer,\n        initialChartData\n    )\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        setIsDataReady(false)\n        dispatch(fetchGlobalTimeline())\n            .then((res) => {\n                setTimeline(res.data.data)\n                setIsDataReady(true)\n            })\n            .catch((err) => {\n                console.log('Error loading timeline data: ', err)\n                setIsDataReady(true)\n            })\n    }, [dispatch])\n\n    useEffect(() => {\n        setAlteredTimeline(\n            timeline.map((d) => {\n                const date = new Date(d.date)\n                return {\n                    ...d,\n                    month: date.toLocaleString('en-us', {\n                        month: 'short'\n                    }),\n                    day: date.toLocaleString('en-us', {\n                        day: '2-digit'\n                    }),\n                    year: date.toLocaleString('en-us', {\n                        year: '2-digit'\n                    }),\n                    month_year: date.toLocaleString('en-us', {\n                        month: 'short',\n                        year: 'numeric'\n                    })\n                }\n            })\n        )\n    }, [timeline])\n\n    useEffect(() => {\n        const grouped = d3Array.group(alteredTimeline, (d) => d.month_year)\n        const timelineCategory: TimelineCategory[] = []\n\n        grouped.forEach((val, key) => {\n            timelineCategory.push({\n                key,\n                [timelineType]: d3Array.sum(val, (d) => d[timelineType])\n            })\n        })\n        dispatchChartData({ type: timelineType, payload: timelineCategory })\n    }, [alteredTimeline, timelineType])\n\n    const onChangeHandler = (value: TimelineType) => {\n        setTimelineType(value)\n    }\n\n    const onMouseLeave = () => {\n        setCrossshairValues([])\n    }\n\n    const onNearestX = (value: any) => {\n        setCrossshairValues([value])\n    }\n\n    return (\n        <div style={{ marginBottom: 20 }}>\n            <div style={{ textAlign: 'right', marginBottom: 10 }}>\n                <Select\n                    onChange={onChangeHandler}\n                    defaultValue={defaultTimelineType}\n                    style={{ width: 150, textAlign: 'left' }}\n                >\n                    <Option value='deaths'>Deaths</Option>\n                    <Option value='new_deaths'>New deaths</Option>\n                    <Option value='confirmed'>Confirmed</Option>\n                    <Option value='new_confirmed'>New confirmed</Option>\n                    <Option value='recovered'>Recovered</Option>\n                    <Option value='new_recovered'>New recovered</Option>\n                </Select>\n            </div>\n            {isDataReady && (\n                <XYPlot\n                    animation='noWobble'\n                    height={220}\n                    width={340}\n                    xType='ordinal'\n                    margin={{\n                        left: 43\n                    }}\n                    onMouseLeave={onMouseLeave}\n                >\n                    <HorizontalGridLines style={{ strokeOpacity: 0.1 }} />\n                    <LineSeries\n                        animation='noWobble'\n                        // @ts-ignore\n                        data={chartData}\n                        opacity={1}\n                        stroke='#b876ef'\n                        strokeStyle='solid'\n                        onNearestX={onNearestX}\n                        curve={'curveBasis'}\n                    />\n                    <AreaSeries\n                        animation='noWobble'\n                        // @ts-ignore\n                        data={chartData}\n                        style={{\n                            strokeWidth: '2px'\n                        }}\n                        opacity={0.4}\n                        stroke='transparent'\n                        fill='#862fcf'\n                        curve={'curveBasis'}\n                    />\n                    <Crosshair\n                        values={crossshairValues}\n                        className={'test-class-name'}\n                    >\n                        <div className={classes.Crosshair}>\n                            <div className={classes.Item}>\n                                <CalendarOutlined\n                                    className={classes.Calendar}\n                                />\n                                {crossshairValues[0]?.x}\n                            </div>\n                            <div className={classes.Item}>\n                                {(timelineType === 'confirmed' ||\n                                    timelineType === 'new_confirmed') && (\n                                    <MedicineBoxOutlined\n                                        className={classes.Cases}\n                                    />\n                                )}\n                                {(timelineType === 'deaths' ||\n                                    timelineType === 'new_deaths') && (\n                                    <FrownOutlined className={classes.Deaths} />\n                                )}\n                                {(timelineType === 'recovered' ||\n                                    timelineType === 'new_recovered') && (\n                                    <SmileOutlined\n                                        className={classes.Recovered}\n                                    />\n                                )}\n\n                                {d3Format.formatPrefix(\n                                    ',.0',\n                                    1\n                                )(crossshairValues[0]?.y)}\n                            </div>\n                        </div>\n                    </Crosshair>\n                    <XAxis\n                        tickSizeInner={0}\n                        tickSizeOuter={0}\n                        tickFormat={(d) => {\n                            const [month] = d.split(' ')\n                            if (month === 'Jan' || month === 'Jul') {\n                                return d\n                            } else {\n                                return ''\n                            }\n                        }}\n                    />\n                    <YAxis\n                        tickSizeInner={0}\n                        tickFormat={(d) => {\n                            return d3Format.format('~s')(d)\n                        }}\n                    />\n                </XYPlot>\n            )}\n        </div>\n    )\n}\n\nexport default WorldChart\n","import { useEffect } from 'react'\nimport { batch } from 'react-redux'\nimport { Statistic, Skeleton } from 'antd'\nimport { useAppSelector, useAppDispatch } from '../../../../store/hooks'\nimport { fetchAllCountriesAndCovidData } from '../../../../store/country-slice'\nimport { fitToBounds } from '../../../../store/map-slice'\nimport { fetchCountryCovid } from '../../../../store/covid-slice'\nimport { setBoard } from '../../../../store/board-slice'\nimport classes from './CountryList.module.scss'\nimport { Country } from '../../../../interfaces'\n\nconst CountryList = () => {\n    const { countries, loading } = useAppSelector((state) => state.country)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        dispatch(fetchAllCountriesAndCovidData())\n    }, [dispatch])\n\n    const onClickHandler = ({ cca2, flag, latest }: Country) => {\n        console.log('latest: ', latest)\n        batch(() => {\n            dispatch(fetchCountryCovid(cca2))\n            dispatch(fitToBounds(cca2))\n            dispatch(setBoard('country'))\n        })\n    }\n\n    return (\n        <>\n            {loading ? (\n                <Skeleton active />\n            ) : (\n                <ul className={classes.List}>\n                    {countries.map((country) => (\n                        <li\n                            key={country.cca2}\n                            className={classes.ListItem}\n                            onClick={() => onClickHandler(country)}\n                        >\n                            <p className={classes.Name}>\n                                <span className={classes.Flag}>\n                                    {country.flag}\n                                </span>\n                                {country.name}\n                            </p>\n                            <div className={classes.Stats}>\n                                <Statistic\n                                    title='Total cases'\n                                    value={country.latest?.confirmed}\n                                />\n                                <Statistic\n                                    title='Total deaths'\n                                    value={country.latest?.deaths}\n                                />\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </>\n    )\n}\n\nexport default CountryList\n","import WorldChart from '../../Charts/WorldChart/WorldChart'\nimport CountryList from './CountryList/CountryList'\nimport classes from './WorldBoard.module.scss'\n\nconst WorldPanel = () => {\n    return (\n        <>\n            <div className={classes.Chart}>\n                <WorldChart />\n            </div>\n            <div className={classes.List}>\n                <CountryList />\n            </div>\n        </>\n    )\n}\n\nexport default WorldPanel\n","import { Skeleton, Space } from 'antd'\n\nconst GeneralSkeleton = () => {\n    return (\n        <Space direction='vertical'>\n            <Space>\n                <Skeleton.Button\n                    active\n                    shape='square'\n                    style={{ width: 30, height: 30 }}\n                    size='small'\n                />\n                <Skeleton.Button\n                    shape='square'\n                    style={{ width: 100, height: 30 }}\n                    active\n                    size='small'\n                />\n            </Space>\n\n            <Space direction='vertical' size='small' style={{ rowGap: 0 }}>\n                <Skeleton.Button\n                    shape='square'\n                    style={{ width: 140, height: '15.7px' }}\n                    active\n                    size='small'\n                />\n                <Skeleton.Button\n                    shape='square'\n                    style={{ width: 150, height: 20 }}\n                    active\n                    size='small'\n                />\n            </Space>\n        </Space>\n    )\n}\n\nexport default GeneralSkeleton\n","import { Skeleton, Space } from 'antd'\n\nconst CovidListSkeleton = () => {\n    return (\n        <Space>\n            <Skeleton.Button\n                active\n                shape='round'\n                style={{ width: 30, height: 30 }}\n                size='small'\n            />\n            <Space\n                direction='vertical'\n                size='small'\n                style={{ rowGap: 0, lineHeight: '18px' }}\n            >\n                <Skeleton.Input\n                    active\n                    size='small'\n                    style={{ width: 70, height: 10, verticalAlign: 'middle' }}\n                />\n                <Skeleton.Input\n                    active\n                    size='small'\n                    style={{ width: 90, height: 12, verticalAlign: 'baseline' }}\n                />\n            </Space>\n            {/* <Skeleton.Button\n                active\n                shape='square'\n                style={{ width: 150, height: 30 }}\n                size='small'\n            /> */}\n        </Space>\n    )\n}\n\nexport default CovidListSkeleton\n","import { Statistic } from 'antd'\nimport {\n    FrownOutlined,\n    ArrowLeftOutlined,\n    SmileOutlined,\n    MedicineBoxOutlined\n} from '@ant-design/icons'\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks'\nimport { setBoard } from '../../../store/board-slice'\nimport GeneralSkeleton from './GeneralSkeleton/GeneralSkeleton'\nimport CovidListSkeleton from './CovidListSkeleton/CovidListSkeleton'\nimport classes from './CountryBoard.module.scss'\n\nconst CountryBoard = () => {\n    const { country, loading } = useAppSelector((state) => state.covid)\n    const dispatch = useAppDispatch()\n\n    const backHandler = () => {\n        dispatch(setBoard('world'))\n    }\n\n    return (\n        <div>\n            <p className={classes.Back} onClick={backHandler}>\n                <ArrowLeftOutlined style={{ marginRight: 8 }} />\n                Back\n            </p>\n            <div className={classes.General}>\n                {loading ? (\n                    <GeneralSkeleton />\n                ) : (\n                    <>\n                        <h3 className={classes.CountryName}>\n                            <span className={classes.Flag}>{country.flag}</span>\n                            {country.name}\n                        </h3>\n\n                        <Statistic\n                            title='Population'\n                            value={country.population}\n                        />\n                    </>\n                )}\n            </div>\n\n            <ul className={classes.Covid}>\n                <li className={classes.ListItem}>\n                    {loading ? (\n                        <CovidListSkeleton />\n                    ) : (\n                        <>\n                            <FrownOutlined\n                                className={`${classes.Icon} ${classes.Deaths}`}\n                            />\n                            <Statistic\n                                title='Deaths'\n                                value={country.latest?.deaths}\n                            />\n                        </>\n                    )}\n                </li>\n                <li className={classes.ListItem}>\n                    {loading ? (\n                        <CovidListSkeleton />\n                    ) : (\n                        <>\n                            <MedicineBoxOutlined\n                                className={`${classes.Icon} ${classes.Confirmed}`}\n                            />\n                            <Statistic\n                                title='Confirmed'\n                                value={country.latest?.confirmed}\n                            />\n                        </>\n                    )}\n                </li>\n                <li className={classes.ListItem}>\n                    {loading ? (\n                        <CovidListSkeleton />\n                    ) : (\n                        <>\n                            <MedicineBoxOutlined\n                                className={`${classes.Icon} ${classes.Critical}`}\n                            />\n                            <Statistic\n                                title='Critical'\n                                value={country.latest?.critical}\n                            />\n                        </>\n                    )}\n                </li>\n                <li className={classes.ListItem}>\n                    {loading ? (\n                        <CovidListSkeleton />\n                    ) : (\n                        <>\n                            <SmileOutlined\n                                className={`${classes.Icon} ${classes.Recovered}`}\n                            />\n                            <Statistic\n                                title='Recovered'\n                                value={country.latest?.recovered}\n                            />\n                        </>\n                    )}\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default CountryBoard\n","import { LeftOutlined, RightOutlined } from '@ant-design/icons'\nimport { useAppSelector, useAppDispatch } from '../../store/hooks'\nimport WorldBoard from './WorldBoard/WorldBoard'\nimport CountryBoard from './CountryBoard/CountryBoard'\nimport classes from './Board.module.scss'\nimport { toggleBoard } from '../../store/board-slice'\n\nconst Board = () => {\n    const { board, open } = useAppSelector((state) => state.board)\n    const dispatch = useAppDispatch()\n\n    const onToggle = () => {\n        dispatch(toggleBoard(!open))\n    }\n\n    return (\n        <div\n            className={`${classes.Board} ${\n                open ? classes.SlideRight : classes.SlideLeft\n            }`}\n        >\n            <div className={classes.Toggler} onClick={onToggle}>\n                <div className={classes.IconWrap}>\n                    {open && <LeftOutlined className={classes.Icon} />}\n                    {!open && <RightOutlined className={classes.Icon} />}\n                </div>\n            </div>\n            <span className={board === 'country' ? classes.Hide : ''}>\n                <WorldBoard />\n            </span>\n            {board === 'country' && <CountryBoard />}\n        </div>\n    )\n}\n\nexport default Board\n","import { useState, useEffect } from 'react'\n\nconst useDebounce = (value: string, delay: number): string => {\n    const [debouncedvalue, setDebouncedValue] = useState(value)\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value)\n        }, delay)\n\n        // clean up and cancel the timeout when value or delay change\n        return () => clearTimeout(handler)\n    }, [value, delay])\n\n    // this will return the latest value,\n    // if \"value\" hasn't been updated within last \"delay\" time\n    return debouncedvalue\n}\n\nexport default useDebounce\n","import { useState, useEffect } from 'react'\nimport { useAppDispatch } from '../../store/hooks'\nimport { fitToBounds } from '../../store/map-slice'\nimport { fetchCountryCovid } from '../../store/covid-slice'\nimport { AutoComplete } from 'antd'\nimport useDebounce from '../../utils/deBounce'\nimport classes from './CountrySearch.module.scss'\nimport {\n    fetchCountryByName,\n    CountryData as CountryDataInterface\n} from '../../store/country-slice'\n\ninterface Option {\n    value: string\n    data: CountryDataInterface\n}\n\nconst CountrySearch = () => {\n    const [text, setText] = useState('')\n    const [options, setOptions] = useState<Option[]>([])\n    const debounceSearchText = useDebounce(text, 300)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        if (debounceSearchText === '') {\n            setOptions([])\n            return\n        }\n\n        dispatch(fetchCountryByName(debounceSearchText))\n            .then((res) => {\n                setOptions(\n                    res.data.map((country) => {\n                        return {\n                            value: country.name.common,\n                            data: country\n                        }\n                    })\n                )\n            })\n            .catch((err) => {\n                console.log('Error while searching country: ', err)\n            })\n    }, [debounceSearchText, dispatch])\n\n    const onSelectHandler = (_: string, option: Option | any) => {\n        console.log('on select: ', option)\n\n        const { cca2 } = option.data\n        dispatch(fetchCountryCovid(cca2))\n        dispatch(fitToBounds(cca2))\n    }\n\n    const onSearchHandler = (value: string) => {\n        setText(value)\n    }\n\n    return (\n        <div className={classes.CountrySearch}>\n            <AutoComplete\n                clearIcon={true}\n                className={classes.Search}\n                options={options}\n                size='large'\n                onSelect={onSelectHandler}\n                onSearch={onSearchHandler}\n                placeholder='Search for country ...'\n            />\n        </div>\n    )\n}\n\nexport default CountrySearch\n","import Map from './components/Map/Map'\nimport Board from './components/Board/Board'\nimport CountrySearch from './components/CountrySearch/CountrySearch'\nimport 'antd/dist/antd.css'\nimport '../node_modules/react-vis/dist/styles/examples.scss'\nimport './styles/styles.scss'\n\nconst App = () => {\n    return (\n        <>\n            <Map />\n            <CountrySearch />\n            <Board />\n        </>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/index'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Back\":\"CountryBoard_Back__2d8La\",\"General\":\"CountryBoard_General__1CLQW\",\"CountryName\":\"CountryBoard_CountryName__2Wvdv\",\"Flag\":\"CountryBoard_Flag__1tQqN\",\"Covid\":\"CountryBoard_Covid__2vpor\",\"ListItem\":\"CountryBoard_ListItem__SdRHo\",\"Icon\":\"CountryBoard_Icon__M7MtO\",\"Deaths\":\"CountryBoard_Deaths__T0c1c\",\"Confirmed\":\"CountryBoard_Confirmed__2bBR6\",\"Recovered\":\"CountryBoard_Recovered__2C6eE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__3IbYL\",\"SlideLeft\":\"Board_SlideLeft__3XFHE\",\"Toggler\":\"Board_Toggler__3t6su\",\"IconWrap\":\"Board_IconWrap__1FCIU\",\"Hide\":\"Board_Hide__2Hv9P\",\"Icon\":\"Board_Icon__1dJCF\",\"SlideRight\":\"Board_SlideRight__givod\",\"slide-right\":\"Board_slide-right__3Q4En\",\"slide-left\":\"Board_slide-left__1HIlr\"};"],"sourceRoot":""}