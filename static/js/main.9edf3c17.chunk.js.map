{"version":3,"sources":["components/Charts/WorldChart/WorldChart.module.scss","components/Board/WorldBoard/CountryList/CountryList.module.scss","components/Board/WorldBoard/WorldBoard.module.scss","components/Board/Board.module.scss","components/CountrySearch/CountrySearch.module.scss","utils/utils.ts","store/map-slice.ts","store/board-slice.ts","store/covid-slice.ts","store/country-slice.ts","store/index.ts","store/hooks.ts","components/Map/layers/GeoJsonLayerHook.tsx","components/Map/Map.tsx","consts.ts","components/Charts/WorldChart/WorldChart.tsx","components/Board/WorldBoard/CountryList/CountryList.tsx","components/Board/WorldBoard/WorldBoard.tsx","components/Board/CountryBoard/CountryBoard.tsx","components/Board/Board.tsx","utils/deBounce.ts","components/CountrySearch/CountrySearch.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Board/CountryBoard/CountryBoard.module.scss"],"names":["module","exports","boundaryBoxData","getFitBounds","alpha2Code","viewState","bounds","bb","getBoundsByAlpha2","console","log","WebMercatorViewport","fitBounds","padding","width","height","longitude","latitude","zoom","mapSlice","createSlice","name","initialState","mapStyle","bearing","pitch","transitionDuration","reducers","setMapStyle","state","action","payload","setViewState","type","fitToBounds","alpha3Code","dispatch","getState","map","actions","boardSlice","board","setBoard","covidSlice","flag","cca2","cca3","population","latest","timeline","setCovidCountry","fetchCountryCovid","a","axios","get","process","response","data","code","latest_data","countries","country","filter","c","countrySlice","setCountries","store","configureStore","reducer","covid","middleware","getDefaultMiddleware","serializableCheck","useAppSelector","useSelector","useAppDispatch","useDispatch","useGeoJsonLayer","useState","layer","setLayer","useEffect","lr","GeoJsonLayer","id","stroked","filled","pickable","autoHighlight","highlightColor","getFillColor","getLineColor","d","lineWidthMinPixels","onClick","info","batch","object","properties","ISO2","boundaryData","countriesGeoJson","Map","layerData","onViewStateChangeHandler","useCallback","transitionInterpolator","FlyToInterpolator","views","MapView","x","window","innerWidth","controller","onViewStateChange","getCursor","interactiveState","isHovering","isDragging","layers","mapboxApiAccessToken","Option","Select","defaultTimelineType","initialChartData","y","chartDataReducer","key","reverse","WorldChart","isDataReady","setIsDataReady","crossshairValues","setCrossshairValues","setTimeline","alteredTimeline","setAlteredTimeline","timelineType","setTimelineType","useReducer","chartData","dispatchChartData","then","res","catch","err","date","Date","month","toLocaleString","day","year","month_year","grouped","d3Array","timelineCategory","forEach","val","push","style","marginBottom","textAlign","onChange","value","defaultValue","animation","xType","margin","left","onMouseLeave","strokeOpacity","opacity","stroke","strokeStyle","onNearestX","curve","strokeWidth","fill","values","className","classes","Crosshair","Item","CalendarOutlined","Calendar","MedicineBoxOutlined","Cases","FrownOutlined","Deaths","SmileOutlined","Recovered","d3Format","tickSizeInner","tickSizeOuter","tickFormat","split","CountryList","countriesResponse","_dispatch","_useSttae","covidResponse","countryFlags","countryCovid","cc","find","cf","confirmed","sort","b","List","ListItem","onClickHandler","Name","Flag","Stats","title","deaths","WorldPanel","Chart","CountryBoard","Back","ArrowLeftOutlined","marginRight","General","CountryName","Covid","Icon","Confirmed","Critical","critical","recovered","Board","Hide","WorldBoard","useDebounce","delay","debouncedvalue","setDebouncedValue","handler","setTimeout","clearTimeout","CountrySearch","text","setText","options","setOptions","debounceSearchText","common","clearIcon","Search","size","onSelect","_","option","onSearch","placeholder","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9edf3c17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Crosshair\":\"WorldChart_Crosshair__3eEK-\",\"Item\":\"WorldChart_Item__j0UGC\",\"Calendar\":\"WorldChart_Calendar__3hsC0\",\"Cases\":\"WorldChart_Cases__1gyFR\",\"Deaths\":\"WorldChart_Deaths__1Q1SE\",\"Recovered\":\"WorldChart_Recovered__3s6lG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"CountryList_List__25G8c\",\"ListItem\":\"CountryList_ListItem__2ZVnX\",\"Stats\":\"CountryList_Stats__3-WxK\",\"Flag\":\"CountryList_Flag__329Is\",\"Name\":\"CountryList_Name__3mFui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"WorldBoard_List__1-ORZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__3IbYL\",\"Hide\":\"Board_Hide__2Hv9P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountrySearch\":\"CountrySearch_CountrySearch__1JgHu\",\"Search\":\"CountrySearch_Search__2mMYU\"};","import { WebMercatorViewport } from '@deck.gl/core'\nimport { ViewState, BoundaryBoxData } from '../interfaces'\nimport bbDataFile from '../data/boundary-boxes.json'\n\nconst boundaryBoxData = bbDataFile as BoundaryBoxData\n\nexport const getBoundsByAlpha2 = (alpha2Code: string | number) => {\n    const bb = boundaryBoxData[alpha2Code]?.[1]\n        ? boundaryBoxData[alpha2Code][1]\n        : [null, [null, null, null, null]]\n    return [\n        [bb[0], bb[1]],\n        [bb[2], bb[3]]\n    ]\n}\n\nexport const getFitBounds = (alpha2Code: string, viewState: ViewState) => {\n    const bounds = getBoundsByAlpha2(alpha2Code)\n    if (bounds[0][0] === null) return false\n    console.log('bounds: ', bounds)\n    const vp = new WebMercatorViewport({ ...viewState }) as unknown as ViewState\n    const { width, height, longitude, latitude, zoom } = vp.fitBounds(bounds, {\n        padding: 60\n    })\n\n    return { width, height, longitude, latitude, zoom }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport { MapboxStyle, ViewState } from '../interfaces'\nimport { getFitBounds } from '../utils/utils'\n\ninterface MapState {\n    mapStyle: MapboxStyle\n    viewState: ViewState\n}\n\nconst initialState: MapState = {\n    mapStyle: 'dark-v10',\n    viewState: {\n        bearing: 0,\n        height: 0,\n        latitude: 43.047295,\n        longitude: 11.753803,\n        pitch: 0,\n        width: 0,\n        zoom: 1.5,\n        transitionDuration: 'auto'\n    }\n}\n\nconst mapSlice = createSlice({\n    name: 'map',\n    initialState,\n    reducers: {\n        setMapStyle(state, action: PayloadAction<MapboxStyle>) {\n            state.mapStyle = action.payload\n        },\n        setViewState(state, action: PayloadAction<ViewState>) {\n            state.viewState = { ...state.viewState, ...action.payload }\n        }\n    }\n})\n\nexport const setMapStyle = (mapStyle: MapboxStyle) => ({\n    type: 'map/setMapStyle',\n    payload: mapStyle\n})\nexport const setViewState = (viewState: ViewState) => ({\n    type: 'map/setViewState',\n    payload: viewState\n})\n\nexport const fitToBounds = (alpha3Code: string): AppThunk => {\n    return (dispatch, getState) => {\n        const { viewState } = getState().map\n        const bounds = getFitBounds(alpha3Code, viewState)\n\n        if (bounds) {\n            const { longitude, latitude, zoom } = bounds\n            dispatch(setViewState({ latitude, longitude, zoom }))\n        }\n    }\n}\n\nexport const mapActions = mapSlice.actions\nexport default mapSlice\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { Board } from '../interfaces'\n\ninterface BoardState {\n    board: Board\n}\n\nconst initialState: BoardState = {\n    board: 'world'\n}\n\nconst boardSlice = createSlice({\n    name: 'board',\n    initialState,\n    reducers: {\n        setBoard(state, action: PayloadAction<Board>) {\n            state.board = action.payload\n        }\n    }\n})\n\nexport const setBoard = (board: Board) => ({\n    type: 'board/setBoard',\n    payload: board\n})\n\nexport const boardActions = boardSlice.actions\nexport default boardSlice\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport axios from 'axios'\nimport {\n    TimelineData,\n    Country,\n    CovidCountriesResponseData\n} from '../interfaces'\n\ninterface fetchTimelineResponse {\n    data: {\n        data: TimelineData[]\n    }\n}\n\ninterface CovidCountryResponse {\n    data: {\n        data: CovidCountriesResponseData\n    }\n}\n\ninterface CovidCountriesResponse {\n    data: {\n        data: CovidCountriesResponseData[]\n    }\n}\n\nconst initialState: Country = {\n    name: '',\n    flag: '',\n    cca2: '',\n    cca3: '',\n    population: 0,\n    latest: null,\n    timeline: null\n}\n\nconst covidSlice = createSlice({\n    name: 'covid',\n    initialState,\n    reducers: {\n        setCovidCountry(state, action: PayloadAction<Country>) {\n            state.name = action.payload.name\n            state.flag = action.payload.flag\n            state.cca2 = action.payload.cca2\n            state.cca3 = action.payload.cca3\n            state.population = action.payload.population\n            state.latest = action.payload.latest\n            state.timeline = action.payload.timeline\n        }\n    }\n})\n\n// action creators\nexport const setCovidCountry = (covidCountry: Country) => ({\n    type: 'covid/setCovidCountry',\n    payload: covidCountry\n})\n\n// thunks\nexport const fetchGlobalTimeline = (): AppThunk<\n    Promise<fetchTimelineResponse>\n> => {\n    return async () => {\n        return await axios.get(`${process.env.REACT_APP_CORONA_API}/timeline`)\n    }\n}\n\nexport const fetchCovidCountries = (): AppThunk<\n    Promise<CovidCountriesResponse>\n> => {\n    return async (_dispatch, _useSttae) => {\n        return await axios.get(`${process.env.REACT_APP_CORONA_API}/countries`)\n    }\n}\n\nexport const fetchCountryCovid = (cca2: string): AppThunk => {\n    return async (dispatch, getState) => {\n        try {\n            const response: CovidCountryResponse = await axios.get(\n                `${process.env.REACT_APP_CORONA_API}/countries/${cca2}`\n            )\n\n            const { name, code, population, latest_data, timeline } =\n                response.data.data\n\n            console.log('response: ', response)\n            const { countries } = getState().country\n            const [country] = countries.filter((c) => c.cca2 === cca2)\n            console.log('flag: ', country)\n            dispatch(\n                setCovidCountry({\n                    name,\n                    cca2: code,\n                    population,\n                    latest: latest_data,\n                    timeline,\n                    flag: country.flag\n                })\n            )\n        } catch (error) {\n            console.log('Error while loading country covid data: ', error)\n        }\n    }\n}\n\nexport default covidSlice\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '.'\nimport axios from 'axios'\nimport { fetchCovidCountries } from './covid-slice'\nimport { Country } from '../interfaces'\n\ninterface CountryName {\n    common: string\n    nativeName: any\n    official: string\n}\n\nexport interface CountryData {\n    name: CountryName\n    cca2: string\n    cca3: string\n    flag: string\n    population: number\n}\n\ninterface CountrySearchResponse {\n    data: CountryData[]\n}\n\ninterface CountryState {\n    countries: Country[]\n    country: Country\n}\n\nconst initialState: CountryState = {\n    countries: [],\n    country: {\n        name: '',\n        flag: '',\n        latest: null,\n        cca2: '',\n        cca3: '',\n        population: 0\n    }\n}\n\nconst countrySlice = createSlice({\n    name: 'country',\n    initialState,\n    reducers: {\n        setCountries(state, action: PayloadAction<Country[]>) {\n            state.countries = action.payload\n        }\n    }\n})\n\n// action creators\nexport const setCountries = (countries: Country[]) => ({\n    type: 'country/setCountries',\n    payload: countries\n})\n\nexport const fetchCountryByName = (\n    name: string\n): AppThunk<Promise<CountrySearchResponse>> => {\n    return async () => {\n        return await axios.get(\n            `${process.env.REACT_APP_RESTCOUNTRIES_API}/name/${name}`\n        )\n    }\n}\n\nexport const fetchAllCountries = (): AppThunk<\n    Promise<CountrySearchResponse>\n> => {\n    return async () => {\n        return await axios.get(\n            `${process.env.REACT_APP_RESTCOUNTRIES_API}/all?fields=flag,cca2`\n        )\n    }\n}\n\nexport const fetchAllCountriesAndCovidData = (): AppThunk => {\n    return async (dispatch) => {\n        try {\n            const countriesResponse = await dispatch(fetchAllCountries())\n            const covidResponse = await dispatch(fetchCovidCountries())\n            const countryFlags = countriesResponse.data\n            const countryCovid = covidResponse.data.data\n\n            const countries = countryCovid\n                .map((cc) => {\n                    const flag = countryFlags.find((cf) => cf.cca2 === cc.code)\n                    return {\n                        name: cc.name,\n                        cca2: cc.code,\n                        latest: cc.latest_data,\n                        flag: flag ? flag.flag : ''\n                    }\n                })\n                .filter((c) => c.latest.confirmed > 100000)\n                .sort((a, b) => b.latest.confirmed - a.latest.confirmed)\n\n            dispatch(setCountries(countries))\n        } catch (error) {\n            console.log('Error while loading country and covid data: ', error)\n        }\n    }\n}\n\nexport const countryActions = countrySlice.actions\nexport default countrySlice\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport mapSlice from './map-slice'\nimport boardSlice from './board-slice'\nimport countrySlice from './country-slice'\nimport covidSlice from './covid-slice'\n\nconst store = configureStore({\n    reducer: {\n        map: mapSlice.reducer,\n        board: boardSlice.reducer,\n        country: countrySlice.reducer,\n        covid: covidSlice.reducer\n    },\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware({\n            serializableCheck: false\n        })\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>\nexport default store\n","import { TypedUseSelectorHook, useSelector, useDispatch } from 'react-redux'\nimport { RootState, AppDispatch } from './index'\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n","import { useState, useEffect } from 'react'\nimport { batch } from 'react-redux'\nimport { GeoJsonLayer } from '@deck.gl/layers'\nimport { useAppDispatch } from '../../../store/hooks'\nimport { Feature, FeatureCollection } from '../../../interfaces'\nimport { fitToBounds } from '../../../store/map-slice'\nimport { fetchCountryCovid } from '../../../store/covid-slice'\nimport { setBoard } from '../../../store/board-slice'\n\nconst useGeoJsonLayer = (data: FeatureCollection): any => {\n    const [layer, setLayer] = useState({})\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        const lr = new GeoJsonLayer({\n            id: 'countries',\n            data: data,\n            stroked: true,\n            filled: true,\n            pickable: true,\n            autoHighlight: true,\n            highlightColor: [245, 198, 0, 10],\n            getFillColor: [0, 0, 0, 0],\n            getLineColor: (d) => [0, 0, 0, 0],\n            lineWidthMinPixels: 1,\n            onClick: (info: any | { object: Feature }) => {\n                batch(() => {\n                    dispatch(fetchCountryCovid(info.object.properties.ISO2))\n                    dispatch(fitToBounds(info.object.properties.ISO2))\n                    dispatch(setBoard('country'))\n                })\n            }\n        })\n\n        setLayer(lr)\n    }, [data, dispatch])\n\n    return { layer }\n}\n\nexport default useGeoJsonLayer\n","import { useState, useCallback, useEffect } from 'react'\nimport { useAppSelector, useAppDispatch } from '../../store/hooks'\nimport { setViewState } from '../../store/map-slice'\nimport DeckGL from '@deck.gl/react'\nimport { FlyToInterpolator, MapView } from '@deck.gl/core'\nimport { StaticMap } from 'react-map-gl'\nimport useGeoJsonLayer from './layers/GeoJsonLayerHook'\nimport { ViewState, FeatureCollection } from '../../interfaces'\nimport { BOARD_WIDTH } from '../../consts'\n// import { json, csv } from 'd3-fetch'\nimport countriesGeoJson from '../../data/countries-geojson.json'\n\nconst boundaryData = countriesGeoJson as FeatureCollection\n\nconst Map = () => {\n    const [layerData] = useState<FeatureCollection>(boundaryData)\n    const { viewState } = useAppSelector((state) => state.map)\n    const { layer } = useGeoJsonLayer(layerData)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        // csv('../../data/boundary-boxes.csv').then((res) => {\n        //     console.log('D3 CSV: ', res)\n        // })\n        console.log('layerData: ', layerData)\n    }, [layerData])\n\n    const onViewStateChangeHandler = useCallback(\n        ({ viewState }: { viewState: ViewState }) => {\n            const { bearing, width, height, latitude, longitude, pitch, zoom } =\n                viewState\n            dispatch(\n                setViewState({\n                    bearing,\n                    width,\n                    height,\n                    latitude,\n                    longitude,\n                    pitch,\n                    zoom\n                })\n            )\n        },\n        [dispatch]\n    )\n\n    return (\n        <div>\n            <DeckGL\n                viewState={{\n                    ...viewState,\n                    transitionInterpolator: new FlyToInterpolator()\n                }}\n                views={[\n                    new MapView({\n                        id: 'map',\n                        x: BOARD_WIDTH,\n                        width: window.innerWidth - BOARD_WIDTH,\n                        controller: true\n                    })\n                ]}\n                onViewStateChange={onViewStateChangeHandler}\n                controller={true}\n                getCursor={(interactiveState: any) => {\n                    if (interactiveState.isHovering) {\n                        return 'pointer'\n                    }\n                    if (interactiveState.isDragging) {\n                        return 'grabbing'\n                    } else {\n                        return 'grab'\n                    }\n                }}\n                layers={[layer]}\n            >\n                <StaticMap\n                    mapStyle={`mapbox://styles/nadun-malinda/cktn4hraw7jst18wbt6udj2yc`}\n                    // mapStyle={'mapbox://styles/mapbox/streets-v11'}\n                    mapboxApiAccessToken={\n                        process.env.REACT_APP_MAPBOX_API_TOKEN\n                    }\n                />\n            </DeckGL>\n        </div>\n    )\n}\n\nexport default Map\n","export const BOARD_WIDTH = 375\n","import { useState, useEffect, useReducer } from 'react'\nimport { Select } from 'antd'\nimport {\n    FrownOutlined,\n    CalendarOutlined,\n    SmileOutlined,\n    MedicineBoxOutlined\n} from '@ant-design/icons'\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    LineSeries,\n    AreaSeries,\n    HorizontalGridLines,\n    Crosshair\n} from 'react-vis'\nimport * as d3Format from 'd3-format'\nimport * as d3Array from 'd3-array'\nimport { useAppDispatch } from '../../../store/hooks'\nimport { fetchGlobalTimeline } from '../../../store/covid-slice'\nimport { TimelineData, CrosshairValues } from '../../../interfaces'\nimport classes from './WorldChart.module.scss'\n\nconst { Option } = Select\n\ntype TimelineType =\n    | 'deaths'\n    | 'new_deaths'\n    | 'confirmed'\n    | 'new_confirmed'\n    | 'recovered'\n    | 'new_recovered'\n\ninterface TimelineCategory {\n    key: string\n    deaths?: number\n    new_deaths?: number\n    confirmed?: number\n    new_confirmed?: number\n    recovered?: number\n    new_recovered?: number\n}\n\ninterface AlteredTimelineData extends TimelineData {\n    day: string\n    month: string\n    year: string\n    month_year: string\n}\n\ninterface ChartData {\n    x: string\n    y: number | undefined\n}\n\ntype ACTIONTYPE = { type: TimelineType; payload: TimelineCategory[] }\n\nconst defaultTimelineType: TimelineType = 'deaths'\nconst initialChartData: ChartData[] = [{ x: '', y: 0 }]\n\nconst chartDataReducer = (\n    state: ChartData[],\n    action: ACTIONTYPE\n): ChartData[] => {\n    switch (action.type) {\n        case 'deaths':\n        case 'new_deaths':\n        case 'confirmed':\n        case 'new_confirmed':\n        case 'recovered':\n        case 'new_recovered':\n            return action.payload\n                .map((d) => {\n                    return {\n                        x: d.key,\n                        y: d[action.type]\n                    }\n                })\n                .reverse()\n\n        default:\n            return state\n    }\n}\n\nconst WorldChart = () => {\n    const [isDataReady, setIsDataReady] = useState(false)\n    const [crossshairValues, setCrossshairValues] = useState<CrosshairValues[]>(\n        []\n    )\n    const [timeline, setTimeline] = useState<TimelineData[]>([])\n    const [alteredTimeline, setAlteredTimeline] = useState<\n        AlteredTimelineData[]\n    >([])\n    const [timelineType, setTimelineType] =\n        useState<TimelineType>(defaultTimelineType)\n    const [chartData, dispatchChartData] = useReducer(\n        chartDataReducer,\n        initialChartData\n    )\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        console.log('chartData: ', chartData)\n    }, [chartData])\n\n    useEffect(() => {\n        setIsDataReady(false)\n        dispatch(fetchGlobalTimeline())\n            .then((res) => {\n                setTimeline(res.data.data)\n                setIsDataReady(true)\n            })\n            .catch((err) => {\n                console.log('Error loading timeline data: ', err)\n                setIsDataReady(true)\n            })\n    }, [dispatch])\n\n    useEffect(() => {\n        setAlteredTimeline(\n            timeline.map((d) => {\n                const date = new Date(d.date)\n                return {\n                    ...d,\n                    month: date.toLocaleString('en-us', {\n                        month: 'short'\n                    }),\n                    day: date.toLocaleString('en-us', {\n                        day: '2-digit'\n                    }),\n                    year: date.toLocaleString('en-us', {\n                        year: '2-digit'\n                    }),\n                    month_year: date.toLocaleString('en-us', {\n                        month: 'short',\n                        year: 'numeric'\n                    })\n                }\n            })\n        )\n    }, [timeline])\n\n    useEffect(() => {\n        const grouped = d3Array.group(alteredTimeline, (d) => d.month_year)\n        const timelineCategory: TimelineCategory[] = []\n\n        grouped.forEach((val, key) => {\n            timelineCategory.push({\n                key,\n                [timelineType]: d3Array.sum(val, (d) => d[timelineType])\n            })\n        })\n        dispatchChartData({ type: timelineType, payload: timelineCategory })\n    }, [alteredTimeline, timelineType])\n\n    const onChangeHandler = (value: TimelineType) => {\n        setTimelineType(value)\n    }\n\n    const onMouseLeave = () => {\n        setCrossshairValues([])\n    }\n\n    const onNearestX = (value: any) => {\n        setCrossshairValues([value])\n    }\n\n    return (\n        <div style={{ marginBottom: 20 }}>\n            <div style={{ textAlign: 'right', marginBottom: 10 }}>\n                <Select\n                    onChange={onChangeHandler}\n                    defaultValue={defaultTimelineType}\n                    style={{ width: 150, textAlign: 'left' }}\n                >\n                    <Option value='deaths'>Deaths</Option>\n                    <Option value='new_deaths'>New deaths</Option>\n                    <Option value='confirmed'>Confirmed</Option>\n                    <Option value='new_confirmed'>New confirmed</Option>\n                    <Option value='recovered'>Recovered</Option>\n                    <Option value='new_recovered'>New recovered</Option>\n                </Select>\n            </div>\n            {isDataReady && (\n                <XYPlot\n                    animation='noWobble'\n                    height={220}\n                    width={340}\n                    xType='ordinal'\n                    margin={{\n                        left: 43\n                    }}\n                    onMouseLeave={onMouseLeave}\n                >\n                    <HorizontalGridLines style={{ strokeOpacity: 0.1 }} />\n                    <LineSeries\n                        animation='noWobble'\n                        // @ts-ignore\n                        data={chartData}\n                        opacity={1}\n                        stroke='#b876ef'\n                        strokeStyle='solid'\n                        onNearestX={onNearestX}\n                        curve={'curveBasis'}\n                    />\n                    <AreaSeries\n                        animation='noWobble'\n                        // @ts-ignore\n                        data={chartData}\n                        style={{\n                            strokeWidth: '2px'\n                        }}\n                        opacity={0.4}\n                        stroke='transparent'\n                        fill='#862fcf'\n                        curve={'curveBasis'}\n                    />\n                    <Crosshair\n                        values={crossshairValues}\n                        className={'test-class-name'}\n                    >\n                        <div className={classes.Crosshair}>\n                            <div className={classes.Item}>\n                                <CalendarOutlined\n                                    className={classes.Calendar}\n                                />\n                                {crossshairValues[0]?.x}\n                            </div>\n                            <div className={classes.Item}>\n                                {(timelineType === 'confirmed' ||\n                                    timelineType === 'new_confirmed') && (\n                                    <MedicineBoxOutlined\n                                        className={classes.Cases}\n                                    />\n                                )}\n                                {(timelineType === 'deaths' ||\n                                    timelineType === 'new_deaths') && (\n                                    <FrownOutlined className={classes.Deaths} />\n                                )}\n                                {(timelineType === 'recovered' ||\n                                    timelineType === 'new_recovered') && (\n                                    <SmileOutlined\n                                        className={classes.Recovered}\n                                    />\n                                )}\n\n                                {d3Format.formatPrefix(\n                                    ',.0',\n                                    1\n                                )(crossshairValues[0]?.y)}\n                            </div>\n                        </div>\n                    </Crosshair>\n                    <XAxis\n                        tickSizeInner={0}\n                        tickSizeOuter={0}\n                        tickFormat={(d) => {\n                            const [month] = d.split(' ')\n                            if (month === 'Jan' || month === 'Jul') {\n                                return d\n                            } else {\n                                return ''\n                            }\n                        }}\n                    />\n                    <YAxis\n                        tickSizeInner={0}\n                        tickFormat={(d) => {\n                            return d3Format.format('~s')(d)\n                        }}\n                    />\n                </XYPlot>\n            )}\n        </div>\n    )\n}\n\nexport default WorldChart\n","import { useEffect } from 'react'\nimport { batch } from 'react-redux'\nimport { Statistic } from 'antd'\nimport { useAppSelector, useAppDispatch } from '../../../../store/hooks'\nimport { fetchAllCountriesAndCovidData } from '../../../../store/country-slice'\nimport { fitToBounds } from '../../../../store/map-slice'\nimport { fetchCountryCovid } from '../../../../store/covid-slice'\nimport { setBoard } from '../../../../store/board-slice'\nimport classes from './CountryList.module.scss'\nimport { Country } from '../../../../interfaces'\n\nconst CountryList = () => {\n    const { countries } = useAppSelector((state) => state.country)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        dispatch(fetchAllCountriesAndCovidData())\n    }, [dispatch])\n\n    const onClickHandler = ({ cca2, flag, latest }: Country) => {\n        console.log('latest: ', latest)\n        batch(() => {\n            dispatch(fetchCountryCovid(cca2))\n            dispatch(fitToBounds(cca2))\n            dispatch(setBoard('country'))\n        })\n    }\n\n    return (\n        <ul className={classes.List}>\n            {countries.map((country) => (\n                <li\n                    key={country.cca2}\n                    className={classes.ListItem}\n                    onClick={() => onClickHandler(country)}\n                >\n                    <p className={classes.Name}>\n                        <span className={classes.Flag}>{country.flag}</span>\n                        {country.name}\n                    </p>\n                    <div className={classes.Stats}>\n                        <Statistic\n                            title='Total cases'\n                            value={country.latest?.confirmed}\n                        />\n                        <Statistic\n                            title='Total deaths'\n                            value={country.latest?.deaths}\n                        />\n                    </div>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default CountryList\n","import WorldChart from '../../Charts/WorldChart/WorldChart'\nimport CountryList from './CountryList/CountryList'\nimport classes from './WorldBoard.module.scss'\n\nconst WorldPanel = () => {\n    return (\n        <>\n            <div className={classes.Chart}>\n                <WorldChart />\n            </div>\n            <div className={classes.List}>\n                <CountryList />\n            </div>\n        </>\n    )\n}\n\nexport default WorldPanel\n","import { Statistic } from 'antd'\nimport {\n    FrownOutlined,\n    ArrowLeftOutlined,\n    SmileOutlined,\n    MedicineBoxOutlined\n} from '@ant-design/icons'\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks'\nimport { setBoard } from '../../../store/board-slice'\nimport classes from './CountryBoard.module.scss'\n\nconst CountryBoard = () => {\n    const { name, population, flag, latest } = useAppSelector(\n        (state) => state.covid\n    )\n    const dispatch = useAppDispatch()\n\n    const backHandler = () => {\n        dispatch(setBoard('world'))\n    }\n\n    return (\n        <div>\n            <p className={classes.Back} onClick={backHandler}>\n                <ArrowLeftOutlined style={{ marginRight: 8 }} />\n                Back\n            </p>\n            <div className={classes.General}>\n                <h3 className={classes.CountryName}>\n                    <span className={classes.Flag}>{flag}</span>\n                    {name}\n                </h3>\n                <Statistic title='Population' value={population} />\n            </div>\n\n            <ul className={classes.Covid}>\n                <li className={classes.ListItem}>\n                    <FrownOutlined\n                        className={`${classes.Icon} ${classes.Deaths}`}\n                    />\n                    <Statistic title='Deaths' value={latest?.deaths} />\n                </li>\n                <li className={classes.ListItem}>\n                    <MedicineBoxOutlined\n                        className={`${classes.Icon} ${classes.Confirmed}`}\n                    />\n                    <Statistic title='Confirmed' value={latest?.confirmed} />\n                </li>\n                <li className={classes.ListItem}>\n                    <MedicineBoxOutlined\n                        className={`${classes.Icon} ${classes.Critical}`}\n                    />\n                    <Statistic title='Critical' value={latest?.critical} />\n                </li>\n                <li className={classes.ListItem}>\n                    <SmileOutlined\n                        className={`${classes.Icon} ${classes.Recovered}`}\n                    />\n                    <Statistic title='Recovered' value={latest?.recovered} />\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default CountryBoard\n","import { useAppSelector } from '../../store/hooks'\nimport WorldBoard from './WorldBoard/WorldBoard'\nimport CountryBoard from './CountryBoard/CountryBoard'\nimport classes from './Board.module.scss'\n\nconst Board = () => {\n    const { board } = useAppSelector((state) => state.board)\n\n    return (\n        <div className={classes.Board}>\n            <span className={board === 'country' ? classes.Hide : ''}>\n                <WorldBoard />\n            </span>\n            {board === 'country' && <CountryBoard />}\n        </div>\n    )\n}\n\nexport default Board\n","import { useState, useEffect } from 'react'\n\nconst useDebounce = (value: string, delay: number): string => {\n    const [debouncedvalue, setDebouncedValue] = useState(value)\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value)\n        }, delay)\n\n        // clean up and cancel the timeout when value or delay change\n        return () => clearTimeout(handler)\n    }, [value, delay])\n\n    // this will return the latest value,\n    // if \"value\" hasn't been updated within last \"delay\" time\n    return debouncedvalue\n}\n\nexport default useDebounce\n","import { useState, useEffect } from 'react'\nimport { useAppDispatch } from '../../store/hooks'\nimport { fitToBounds } from '../../store/map-slice'\nimport { fetchCountryCovid } from '../../store/covid-slice'\nimport { AutoComplete } from 'antd'\nimport useDebounce from '../../utils/deBounce'\nimport classes from './CountrySearch.module.scss'\nimport {\n    fetchCountryByName,\n    CountryData as CountryDataInterface\n} from '../../store/country-slice'\n\ninterface Option {\n    value: string\n    data: CountryDataInterface\n}\n\nconst CountrySearch = () => {\n    const [text, setText] = useState('')\n    const [options, setOptions] = useState<Option[]>([])\n    const debounceSearchText = useDebounce(text, 300)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        if (debounceSearchText === '') {\n            setOptions([])\n            return\n        }\n\n        dispatch(fetchCountryByName(debounceSearchText))\n            .then((res) => {\n                setOptions(\n                    res.data.map((country) => {\n                        return {\n                            value: country.name.common,\n                            data: country\n                        }\n                    })\n                )\n            })\n            .catch((err) => {\n                console.log('Error while searching country: ', err)\n            })\n    }, [debounceSearchText, dispatch])\n\n    const onSelectHandler = (_: string, option: Option | any) => {\n        console.log('on select: ', option)\n\n        const { cca2 } = option.data\n        dispatch(fetchCountryCovid(cca2))\n        dispatch(fitToBounds(cca2))\n    }\n\n    const onSearchHandler = (value: string) => {\n        setText(value)\n    }\n\n    return (\n        <div className={classes.CountrySearch}>\n            <AutoComplete\n                clearIcon={true}\n                className={classes.Search}\n                options={options}\n                size='large'\n                onSelect={onSelectHandler}\n                onSearch={onSearchHandler}\n                placeholder='Search for country ...'\n            />\n        </div>\n    )\n}\n\nexport default CountrySearch\n","import Map from './components/Map/Map'\nimport Board from './components/Board/Board'\nimport CountrySearch from './components/CountrySearch/CountrySearch'\nimport 'antd/dist/antd.css'\nimport '../node_modules/react-vis/dist/styles/examples.scss'\nimport './styles/styles.scss'\n\nconst App = () => {\n    return (\n        <>\n            <CountrySearch />\n            <Board />\n            <Map />\n        </>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/index'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Back\":\"CountryBoard_Back__2d8La\",\"General\":\"CountryBoard_General__1CLQW\",\"CountryName\":\"CountryBoard_CountryName__2Wvdv\",\"Flag\":\"CountryBoard_Flag__1tQqN\",\"Covid\":\"CountryBoard_Covid__2vpor\",\"ListItem\":\"CountryBoard_ListItem__SdRHo\",\"Icon\":\"CountryBoard_Icon__M7MtO\",\"Deaths\":\"CountryBoard_Deaths__T0c1c\",\"Confirmed\":\"CountryBoard_Confirmed__2bBR6\",\"Recovered\":\"CountryBoard_Recovered__2C6eE\"};"],"sourceRoot":""}